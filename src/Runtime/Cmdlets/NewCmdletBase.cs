// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6306, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Management.Automation;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Graph.PowerShell.Runtime.PowerShell;

namespace Microsoft.Graph.PowerShell.Runtime.Cmdlets
{
    using static Extensions;

    public abstract class NewCmdletBase<TModel> : PSCmdlet,
        IEventListener
    {
        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private InvocationInfo _invocationInfo;

        /// <summary>
        ///     The <see cref="CancellationTokenSource" /> for this operation.
        /// </summary>
        private readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

        protected abstract string Url { get; }

        /// <summary>securityAction</summary>
        [Parameter(Mandatory = true, HelpMessage = "Object to create", ValueFromPipeline = true)]
        public virtual TModel InputObject { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [Category(ParameterCategory.Runtime)]
        public SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [Parameter(Mandatory = false, DontShow = true,
            HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [ValidateNotNull]
        [Category(ParameterCategory.Runtime)]
        public SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [Parameter(Mandatory = false, DontShow = true,
            HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [ValidateNotNull]
        [Category(ParameterCategory.Runtime)]
        public SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public InvocationInfo InvocationInformation
        {
            get => _invocationInfo = _invocationInfo ?? MyInvocation;
            set => _invocationInfo = value;
        }

        /// <summary>
        ///     The instance of the <see cref=HttpPipeline" /> that the remote call will use.
        /// </summary>
        private HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [Category(ParameterCategory.Runtime)]
        public Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [Parameter(Mandatory = false, DontShow = true,
            HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [ValidateNotNull]
        [Category(ParameterCategory.Runtime)]
        public PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [Category(ParameterCategory.Runtime)]
        public SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        ///     <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        Action IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        public CancellationToken Token => _cancellationTokenSource.Token;

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        ///     A <see cref="Task" /> that will be complete when handling of the message is completed.
        /// </returns>
        async Task IEventListener.Signal(string id, CancellationToken token, Func<EventData> messageData)
        {
            using (NoSynchronizationContext)
            {
                if (token.IsCancellationRequested) return;

                switch (id)
                {
                    case Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{messageData().Message ?? string.Empty}");
                        return;
                    }
                    case Runtime.Events.Warning:
                    {
                        WriteWarning($"{messageData().Message ?? string.Empty}");
                        return;
                    }
                    case Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data, new[] {data.Message});
                        return;
                    }
                    case Runtime.Events.Debug:
                    {
                        WriteDebug($"{messageData().Message ?? string.Empty}");
                        return;
                    }
                    case Runtime.Events.Error:
                    {
                        WriteError(new ErrorRecord(new Exception(messageData().Message), string.Empty,
                            ErrorCategory.NotSpecified, null));
                        return;
                    }
                }

                await Module.Instance.Signal(id, token, messageData,
                    (i, t, m) => ((IEventListener) this).Signal(i, t, () => EventDataConverter.ConvertFrom(m())),
                    InvocationInformation, ParameterSetName, null);
                if (token.IsCancellationRequested) return;
                WriteDebug($"{id}: {messageData().Message ?? string.Empty}");
            }
        }

        /// <summary>
        ///     (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break) AttachDebugger.Break();
            this.Signal(Runtime.Events.CmdletBeginProcessing, Token).Wait(Token);
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            this.Signal(Runtime.Events.CmdletEndProcessing, Token).Wait(Token);
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            this.Signal(Runtime.Events.CmdletProcessRecordStart, Token).Wait(Token);
            if (Token.IsCancellationRequested) return;
            try
            {
                // work
                if (ShouldProcess("Call remote 'SecurityCreateSecurityActions' operation"))
                    using (var asyncCommandRuntime = new AsyncCommandRuntime(this, Token))
                    {
                        asyncCommandRuntime.Wait(ProcessRecordAsync(), Token);
                    }
            }
            catch (AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach (var innerException in aggregateException.Flatten().InnerExceptions)
                {
                    this.Signal(Runtime.Events.CmdletException,
                            $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}")
                        .Wait();
                    if (((IEventListener) this).Token.IsCancellationRequested) return;
                    // Write exception out to error channel.
                    WriteError(new ErrorRecord(innerException, string.Empty, ErrorCategory.NotSpecified, null));
                }
            }
            catch (Exception exception) when (!(exception is PipelineStoppedException stoppedException) ||
                                              stoppedException.InnerException != null)
            {
                this.Signal(Runtime.Events.CmdletException, Token, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(Token);
                if (Token.IsCancellationRequested) return;
                // Write exception out to error channel.
                WriteError(new ErrorRecord(exception, string.Empty, ErrorCategory.NotSpecified, null));
            }
            finally
            {
                this.Signal(Runtime.Events.CmdletProcessRecordEnd, Token).Wait(Token);
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        ///     A <see cref="Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async Task ProcessRecordAsync()
        {
            using (NoSynchronizationContext)
            {
                await this.Signal(Runtime.Events.CmdletProcessRecordAsyncStart, Token);
                if (Token.IsCancellationRequested) return;
                await this.Signal(Runtime.Events.CmdletGetPipeline, Token);
                if (Token.IsCancellationRequested) return;
                Pipeline = Module.Instance.CreatePipeline(InvocationInformation, ParameterSetName);
                if (null != HttpPipelinePrepend)
                    Pipeline.Prepend((CommandRuntime as IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ??
                                     HttpPipelinePrepend);
                if (null != HttpPipelineAppend)
                    Pipeline.Append((CommandRuntime as IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ??
                                    HttpPipelineAppend);
                // get the client instance
                try
                {
                    await this.Signal(Runtime.Events.CmdletBeforeAPICall, Token);
                    if (Token.IsCancellationRequested) return;
                    await Module.Instance.GraphClient.Create(Url, InputObject, OnCreated, OnDefault, this, Pipeline);
                    await this.Signal(Runtime.Events.CmdletAfterAPICall, Token);
                    if (Token.IsCancellationRequested) return;
                }
                catch (UndeclaredResponseException urexception)
                {
                    WriteError(new ErrorRecord(urexception, urexception.StatusCode.ToString(),
                        ErrorCategory.InvalidOperation, new {body = InputObject})
                    {
                        ErrorDetails = new ErrorDetails(urexception.Message) {RecommendedAction = urexception.Action}
                    });
                }
                finally
                {
                    await this.Signal(Runtime.Events.CmdletProcessRecordAsyncEnd, Token);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((IEventListener) this).Cancel();
            base.StopProcessing();
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">
        ///     the body result as a <see cref="ODataResponse{T}" /> from the remote
        ///     call
        /// </param>
        /// <returns>
        ///     A <see cref="Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async Task OnCreated(HttpResponseMessage responseMessage,
            Task<ODataResponse<TModel>> response)
        {
            using (NoSynchronizationContext)
            {
                // onCreated - response for 201 / application/json
                // (await response) // should be Microsoft.Graph.PowerShell.Models.IMicrosoftGraphSecurityAction
                WriteObject(await response);
            }
        }

        /// <summary>
        ///     a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">
        ///     the body result as a <see cref="OdataError" /> from the remote
        ///     call
        /// </param>
        /// <returns>
        ///     A <see cref="Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async Task OnDefault(HttpResponseMessage responseMessage, Task<OdataError> response)
        {
            using (NoSynchronizationContext)
            {
                // Error Response : default
                // Unrecognized Response. Create an error record based on what we have.
                var ex = new RestException<OdataError>(responseMessage, await response);
                WriteError(new ErrorRecord(ex, ex.Code, ErrorCategory.InvalidOperation, new {body = InputObject})
                {
                    ErrorDetails = new ErrorDetails(ex.Message) {RecommendedAction = ex.Action}
                });
            }
        }
    }
}