// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6306, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Graph.PowerShell.Runtime
{
    using System;
    using System.Management.Automation;
    using System.Net.Http;
    using static Microsoft.Graph.PowerShell.Runtime.Extensions;

    /// <summary>Get securityActions from security</summary>
    /// <remarks>
    /// [OpenAPI] security_ListSecurityActions=>GET:"/security/securityActions"
    /// </remarks>
    public abstract class ListCmdletBase<TModel, TClient> : PSCmdlet,
        IEventListener
    {


        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        protected InvocationInfo __invocationInfo;

        /// <summary>
        /// The <see cref="System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        protected System.Threading.CancellationTokenSource _cancellationTokenSource = new System.Threading.CancellationTokenSource();

        /// <summary>Wait for .NET debugger to attach</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [Category(ParameterCategory.Runtime)]
        public SwitchParameter Break { get; set; }

        public abstract IModule Module { get; }
        /// <summary>The reference to the client API class.</summary>
        public abstract TClient Client { get; }

        /// <summary>Backing field for <see cref="Count" /> property.</summary>



        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [ValidateNotNull]
        [Category(ParameterCategory.Runtime)]
        public SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [ValidateNotNull]
        [Category(ParameterCategory.Runtime)]
        public SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? MyInvocation; set { __invocationInfo = value; } }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        Action IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        System.Threading.CancellationToken IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// The instance of the <see cref="HttpPipeline" /> that the remote call will use.
        /// </summary>
        protected HttpPipeline Pipeline { get; set; }

        /// <summary>Select properties to be returned</summary>
        [Parameter(Mandatory = false, HelpMessage = "Select properties to be returned")]
        [AllowEmptyCollection]
        [Info(
        Required = false,
        ReadOnly = false,
        Description = @"Select properties to be returned",
        SerializedName = @"$select",
        PossibleTypes = new[] { typeof(string) })]
        [Alias("Select")]
        [Category(ParameterCategory.Query)]
        public string[] Property { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [Category(ParameterCategory.Runtime)]
        public Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [ValidateNotNull]
        [Category(ParameterCategory.Runtime)]
        public PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [Category(ParameterCategory.Runtime)]
        public SwitchParameter ProxyUseDefaultCredentials { get; set; }



        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            //if (InvocationInformation?.BoundParameters != null) { InitializeCmdlet(ref __invocationInfo, ref _top, ref _count); }

            Module.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                AttachDebugger.Break();
            }
            ((IEventListener)this).Signal(Runtime.Events.CmdletBeginProcessing).Wait(); if (((IEventListener)this).Token.IsCancellationRequested) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            ((IEventListener)this).Signal(Runtime.Events.CmdletEndProcessing).Wait(); if (((IEventListener)this).Token.IsCancellationRequested) { return; }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="GetMgSecurityAction_List" /> cmdlet class.
        /// </summary>
        public ListCmdletBase()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
        async System.Threading.Tasks.Task IEventListener.Signal(string id, System.Threading.CancellationToken token, Func<EventData> messageData)
        {
            using (NoSynchronizationContext)
            {
                if (token.IsCancellationRequested)
                {
                    return;
                }

                switch (id)
                {
                    case Runtime.Events.Verbose:
                        {
                            WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                            return;
                        }
                    case Runtime.Events.Warning:
                        {
                            WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                            return;
                        }
                    case Runtime.Events.Information:
                        {
                            var data = messageData();
                            WriteInformation(data, new[] { data.Message });
                            return;
                        }
                    case Runtime.Events.Debug:
                        {
                            WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                            return;
                        }
                    case Runtime.Events.Error:
                        {
                            WriteError(new ErrorRecord(new Exception(messageData().Message), string.Empty, ErrorCategory.NotSpecified, null));
                            return;
                        }
                }
                await Module.Signal(id, token, messageData, (i, t, m) => ((IEventListener)this).Signal(i, t, () => EventDataConverter.ConvertFrom(m()) as EventData), InvocationInformation, ParameterSetName, null);
                if (token.IsCancellationRequested)
                {
                    return;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((IEventListener)this).Signal(Runtime.Events.CmdletProcessRecordStart).Wait(); if (((IEventListener)this).Token.IsCancellationRequested) { return; }
            try
            {
                // work
                using (var asyncCommandRuntime = new PowerShell.AsyncCommandRuntime(this, ((IEventListener)this).Token))
                {
                    asyncCommandRuntime.Wait(ProcessRecordAsync(), ((IEventListener)this).Token);
                }
            }
            catch (AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach (var innerException in aggregateException.Flatten().InnerExceptions)
                {
                    ((IEventListener)this).Signal(Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if (((IEventListener)this).Token.IsCancellationRequested) { return; }
                    // Write exception out to error channel.
                    WriteError(new ErrorRecord(innerException, string.Empty, ErrorCategory.NotSpecified, null));
                }
            }
            catch (Exception exception) when ((exception as PipelineStoppedException) == null || (exception as PipelineStoppedException).InnerException != null)
            {
                ((IEventListener)this).Signal(Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if (((IEventListener)this).Token.IsCancellationRequested) { return; }
                // Write exception out to error channel.
                WriteError(new ErrorRecord(exception, string.Empty, ErrorCategory.NotSpecified, null));
            }
            finally
            {
                ((IEventListener)this).Signal(Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using (NoSynchronizationContext)
            {
                await ((IEventListener)this).Signal(Runtime.Events.CmdletProcessRecordAsyncStart); if (((IEventListener)this).Token.IsCancellationRequested) { return; }
                await ((IEventListener)this).Signal(Runtime.Events.CmdletGetPipeline); if (((IEventListener)this).Token.IsCancellationRequested) { return; }
                Pipeline = Module.CreatePipeline(InvocationInformation, ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((CommandRuntime as PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((CommandRuntime as PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((IEventListener)this).Signal(Runtime.Events.CmdletBeforeAPICall); if (((IEventListener)this).Token.IsCancellationRequested) { return; }
                    await ProcessRecordInternalAsync();
                    await ((IEventListener)this).Signal(Runtime.Events.CmdletAfterAPICall); if (((IEventListener)this).Token.IsCancellationRequested) { return; }
                }
                catch (UndeclaredResponseException )
                {
                    //WriteError(new ErrorRecord(urexception, urexception.StatusCode.ToString(), ErrorCategory.InvalidOperation, new { Top = InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?), Skip = InvocationInformation.BoundParameters.ContainsKey("Skip") ? Skip : default(int?), Search = FormatSearchValue(InvocationInformation.BoundParameters, Search), Filter = InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null, Count = InvocationInformation.BoundParameters.ContainsKey("Count") ? Count : default(SwitchParameter?), Sort = InvocationInformation.BoundParameters.ContainsKey("Sort") ? Sort : null /* arrayOf */, Property = InvocationInformation.BoundParameters.ContainsKey("Property") ? Property : null /* arrayOf */, ExpandProperty = InvocationInformation.BoundParameters.ContainsKey("ExpandProperty") ? ExpandProperty : null /* arrayOf */})
                    //{
                    //    ErrorDetails = new ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    //});
                }
                finally
                {
                    await ((IEventListener)this).Signal(Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }
        protected abstract System.Threading.Tasks.Task ProcessRecordInternalAsync();
        protected abstract System.Threading.Tasks.Task CallNextAsync(HttpRequestMessage requestMessage);

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="PowerShell.Models.IOdataError" /> from the remote
        /// call</param>
        /// <returns>
        /// A <see cref="System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async System.Threading.Tasks.Task onDefault(HttpResponseMessage responseMessage, System.Threading.Tasks.Task<OdataError> response)
        {
            using (NoSynchronizationContext)
            {
                // Error Response : default
                // Unrecognized Response. Create an error record based on what we have.
                var ex = new RestException<OdataError>(responseMessage, await response);
                //WriteError(new ErrorRecord(ex, ex.Code, ErrorCategory.InvalidOperation, new { Top = InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?), Skip = InvocationInformation.BoundParameters.ContainsKey("Skip") ? Skip : default(int?), Search = FormatSearchValue(InvocationInformation.BoundParameters, Search), Filter = InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null, Count = InvocationInformation.BoundParameters.ContainsKey("Count") ? Count : default(SwitchParameter?), Sort = InvocationInformation.BoundParameters.ContainsKey("Sort") ? Sort : null /* arrayOf */, Property = InvocationInformation.BoundParameters.ContainsKey("Property") ? Property : null /* arrayOf */, ExpandProperty = InvocationInformation.BoundParameters.ContainsKey("ExpandProperty") ? ExpandProperty : null /* arrayOf */ })
                //{
                //    ErrorDetails = new ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                //});
            }
        }

    }
}