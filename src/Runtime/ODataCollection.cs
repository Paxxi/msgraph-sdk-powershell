// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6306, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Graph.PowerShell.Runtime
{
    using System.Collections.Generic;

    /// <summary>Collection of directoryObject</summary>
    public partial class ODataCollection<T> : IAssociativeArray<object>
    {
        public ODataCollection()
        {

        }

        [Origin(PropertyOrigin.Owned)]
        public string OdataNextLink { get; set; }

        [Origin(PropertyOrigin.Owned)]
        public T[] Value { get; set; }

        protected Dictionary<string,object> __additionalProperties = new Dictionary<string, object>();

        public IDictionary<string, object> AdditionalProperties { get => __additionalProperties; }

        public object this[string index] { get => __additionalProperties[index]; set => __additionalProperties[index] = value; }

        /// <param name="key"></param>
        /// <param name="value"></param>
        public void Add(string key, object value) => __additionalProperties.Add( key, value);

        public void Clear() => __additionalProperties.Clear();

        /// <param name="key"></param>
        public bool ContainsKey(string key) => __additionalProperties.ContainsKey( key);

        /// <param name="source"></param>
        public void CopyFrom(System.Collections.IDictionary source)
        {
            if (null != source)
            {
                foreach( var property in PowerShell.TypeConverterExtensions.GetFilteredProperties(source, new HashSet<string>() { "OdataNextLink","Value" } ) )
                {
                    if ((null != property.Key && null != property.Value))
                    {
                        __additionalProperties.Add(property.Key.ToString(), System.Management.Automation.LanguagePrimitives.ConvertTo<object>( property.Value));
                    }
                }
            }
        }

        /// <param name="source"></param>
        public void CopyFrom(System.Management.Automation.PSObject source)
        {
            if (null != source)
            {
                foreach( var property in PowerShell.TypeConverterExtensions.GetFilteredProperties(source, new HashSet<string>() { "OdataNextLink","Value" } ) )
                {
                    if ((null != property.Key && null != property.Value))
                    {
                        __additionalProperties.Add(property.Key.ToString(), System.Management.Automation.LanguagePrimitives.ConvertTo<object>( property.Value));
                    }
                }
            }
        }

        /// <param name="key"></param>
        public bool Remove(string key) => __additionalProperties.Remove( key);

        /// <param name="key"></param>
        /// <param name="value"></param>
        public bool TryGetValue(string key, out object value) => __additionalProperties.TryGetValue( key, out value);

        /// <param name="source"></param>

        public static implicit operator Dictionary<string, object>(ODataCollection<T> source) => source.__additionalProperties;
    }
}