// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6306, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections;
using System.Management.Automation;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Graph.PowerShell.Runtime;
using Microsoft.Graph.PowerShell.Runtime.PowerShell;
using Microsoft.Graph.PowerShell.Security.Models;

namespace Microsoft.Graph.PowerShell.Security.Cmdlets
{
    using static Extensions;

    /// <summary>Create new navigation property to securityActions for security</summary>
    /// <remarks>
    ///     [OpenAPI] security_CreateSecurityActions=>POST:"/security/securityActions"
    /// </remarks>
    [Cmdlet(VerbsCommon.New, @"MgSecurityAction_CreateExpanded", SupportsShouldProcess = true)]
    [OutputType(typeof(MgAction))]
    [Description(@"Create new navigation property to securityActions for security")]
    [Generated]
    [Profile("v1.0-beta")]
    public class NewMgSecurityAction_CreateExpanded : PSCmdlet,
        IEventListener
    {
        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private InvocationInfo __invocationInfo;

        /// <summary>Backing field for <see cref="BodyParameterBody" /> property.</summary>
        private MgAction _bodyParameterBody = new MgAction();

        /// <summary>
        ///     The <see cref="CancellationTokenSource" /> for this operation.
        /// </summary>
        private readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();

        /// <summary>Reason for invoking this action.</summary>
        [Parameter(Mandatory = false, HelpMessage = "Reason for invoking this action.")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"Reason for invoking this action.",
            SerializedName = @"actionReason",
            PossibleTypes = new[] {typeof(string)})]
        public string ActionReason
        {
            get => BodyParameterBody.ActionReason ?? null;
            set => BodyParameterBody.ActionReason = value;
        }

        [Parameter(Mandatory = false, HelpMessage = "Additional Parameters")]
        public Hashtable AdditionalProperties { get; set; } = new Hashtable();

        /// <summary>
        ///     The Application ID of the calling application that submitted (POST) the action. The appId should be extracted from
        ///     the
        ///     auth token and not entered manually by the calling application.
        /// </summary>
        [Parameter(Mandatory = false,
            HelpMessage =
                "The Application ID of the calling application that submitted (POST) the action. The appId should be extracted from the auth token and not entered manually by the calling application.")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description =
                @"The Application ID of the calling application that submitted (POST) the action. The appId should be extracted from the auth token and not entered manually by the calling application.",
            SerializedName = @"appId",
            PossibleTypes = new[] {typeof(string)})]
        public string AppId
        {
            get => BodyParameterBody.AppId ?? null;
            set => BodyParameterBody.AppId = value;
        }

        /// <summary>
        ///     Azure tenant ID of the entity to determine which tenant the entity belongs to (multi-tenancy support). The
        ///     azureTenantId
        ///     should be extracted from the auth token and not entered manually by the calling application.
        /// </summary>
        [Parameter(Mandatory = false,
            HelpMessage =
                "Azure tenant ID of the entity to determine which tenant the entity belongs to (multi-tenancy support). The azureTenantId should be extracted from the auth token and not entered manually by the calling application.")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description =
                @"Azure tenant ID of the entity to determine which tenant the entity belongs to (multi-tenancy support). The azureTenantId should be extracted from the auth token and not entered manually by the calling application.",
            SerializedName = @"azureTenantId",
            PossibleTypes = new[] {typeof(string)})]
        public string AzureTenantId
        {
            get => BodyParameterBody.AzureTenantId ?? null;
            set => BodyParameterBody.AzureTenantId = value;
        }

        /// <summary>securityAction</summary>
        private MgAction BodyParameterBody
        {
            get => _bodyParameterBody;
            set => _bodyParameterBody = value;
        }

        /// <summary>Wait for .NET debugger to attach</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [Category(ParameterCategory.Runtime)]
        public SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public GraphClient GraphClient => Module.Instance.GraphClient;

        /// <summary>.</summary>
        [Parameter(Mandatory = false, HelpMessage = ".")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @".",
            SerializedName = @"clientContext",
            PossibleTypes = new[] {typeof(string)})]
        public string ClientContext
        {
            get => BodyParameterBody.ClientContext ?? null;
            set => BodyParameterBody.ClientContext = value;
        }

        /// <summary>
        ///     Timestamp when the action was completed. The Timestamp type represents date and time information using ISO 8601
        ///     format
        ///     and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        [Parameter(Mandatory = false,
            HelpMessage =
                "Timestamp when the action was completed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z")]
        public DateTime CompletedDateTime
        {
            get => BodyParameterBody.CompletedDateTime ?? default(DateTime);
            set => BodyParameterBody.CompletedDateTime = value;
        }

        /// <summary>
        ///     Timestamp when the action is created. The Timestamp type represents date and time information using ISO 8601 format
        ///     and
        ///     is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        [Parameter(Mandatory = false,
            HelpMessage =
                "Timestamp when the action is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z")]
        public DateTime CreatedDateTime
        {
            get => BodyParameterBody.CreatedDateTime ?? default(DateTime);
            set => BodyParameterBody.CreatedDateTime = value;
        }

        /// <summary>resultInfo</summary>
        [Parameter(Mandatory = false, HelpMessage = "resultInfo")]
        public MicrosoftGraphResultInfo ErrorInfo
        {
            get => BodyParameterBody.ErrorInfo ?? null /* object */;
            set => BodyParameterBody.ErrorInfo = value;
        }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [Parameter(Mandatory = false, DontShow = true,
            HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [ValidateNotNull]
        [Category(ParameterCategory.Runtime)]
        public SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [Parameter(Mandatory = false, DontShow = true,
            HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [ValidateNotNull]
        [Category(ParameterCategory.Runtime)]
        public SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Read-only.</summary>
        [Parameter(Mandatory = false, HelpMessage = "Read-only.")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"Read-only.",
            SerializedName = @"id",
            PossibleTypes = new[] {typeof(string)})]
        public string Id
        {
            get => BodyParameterBody.Id ?? null;
            set => BodyParameterBody.Id = value;
        }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public InvocationInfo InvocationInformation
        {
            get => __invocationInfo = __invocationInfo ?? MyInvocation;
            set => __invocationInfo = value;
        }

        /// <summary>
        ///     Timestamp when this action was last updated. The Timestamp type represents date and time information using ISO 8601
        ///     format
        ///     and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        [Parameter(Mandatory = false,
            HelpMessage =
                "Timestamp when this action was last updated. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description =
                @"Timestamp when this action was last updated. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z",
            SerializedName = @"lastActionDateTime",
            PossibleTypes = new[] {typeof(DateTime)})]
        public DateTime LastActionDateTime
        {
            get => BodyParameterBody.LastActionDateTime ?? default(DateTime);
            set => BodyParameterBody.LastActionDateTime = value;
        }

        /// <summary>MgAction name.</summary>
        [Parameter(Mandatory = false, HelpMessage = "MgAction name.")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"MgAction name.",
            SerializedName = @"name",
            PossibleTypes = new[] {typeof(string)})]
        public string Name
        {
            get => BodyParameterBody.Name ?? null;
            set => BodyParameterBody.Name = value;
        }

        /// <summary>
        ///     Collection of parameters (key-value pairs) necessary to invoke the action, e.g. URL or fileHash to block, etc.).
        ///     Required
        /// </summary>
        [AllowEmptyCollection]
        [Parameter(Mandatory = false,
            HelpMessage =
                "Collection of parameters (key-value pairs) necessary to invoke the action, e.g. URL or fileHash to block, etc.). Required")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description =
                @"Collection of parameters (key-value pairs) necessary to invoke the action, e.g. URL or fileHash to block, etc.). Required",
            SerializedName = @"parameters",
            PossibleTypes = new[] {typeof(MicrosoftGraphKeyValuePair)})]
        public MicrosoftGraphKeyValuePair[] Parameters
        {
            get => BodyParameterBody.Parameters ?? null /* arrayOf */;
            set => BodyParameterBody.Parameters = value;
        }

        /// <summary>
        ///     The instance of the <see cref="Microsoft.Graph.PowerShell.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [Category(ParameterCategory.Runtime)]
        public Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [Parameter(Mandatory = false, DontShow = true,
            HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [ValidateNotNull]
        [Category(ParameterCategory.Runtime)]
        public PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [Category(ParameterCategory.Runtime)]
        public SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Collection of securityActionState to keep the history of an action.</summary>
        [AllowEmptyCollection]
        [Parameter(Mandatory = false,
            HelpMessage = "Collection of securityActionState to keep the history of an action.")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"Collection of securityActionState to keep the history of an action.",
            SerializedName = @"states",
            PossibleTypes = new[] {typeof(MicrosoftGraphSecurityActionState)})]
        public MicrosoftGraphSecurityActionState[] States
        {
            get => BodyParameterBody.States ?? null /* arrayOf */;
            set => BodyParameterBody.States = value;
        }

        /// <summary>operationStatus</summary>
        [Parameter(Mandatory = false, HelpMessage = "operationStatus")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"operationStatus",
            SerializedName = @"status",
            PossibleTypes = new[] {typeof(string)})]
        public string Status
        {
            get => BodyParameterBody.Status ?? null;
            set => BodyParameterBody.Status = value;
        }

        /// <summary>
        ///     The user principal name of the signed-in user that submitted (POST) the action. The user should be extracted from
        ///     the
        ///     auth token and not entered manually by the calling application.
        /// </summary>
        [Parameter(Mandatory = false,
            HelpMessage =
                "The user principal name of the signed-in user that submitted (POST) the action. The user should be extracted from the auth token and not entered manually by the calling application.")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description =
                @"The user principal name of the signed-in user that submitted (POST) the action. The user should be extracted from the auth token and not entered manually by the calling application.",
            SerializedName = @"user",
            PossibleTypes = new[] {typeof(string)})]
        public string User
        {
            get => BodyParameterBody.User ?? null;
            set => BodyParameterBody.User = value;
        }

        /// <summary>securityVendorInformation</summary>
        [Parameter(Mandatory = false, HelpMessage = "securityVendorInformation")]
        [Category(ParameterCategory.Body)]
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"securityVendorInformation",
            SerializedName = @"vendorInformation",
            PossibleTypes = new[] {typeof(MgSecurityVendorInformation)})]
        public MgSecurityVendorInformation VendorInformation
        {
            get => BodyParameterBody.VendorInformation ?? null /* object */;
            set => BodyParameterBody.VendorInformation = value;
        }

        /// <summary>
        ///     <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        Action IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        CancellationToken IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        ///     A <see cref="Task" /> that will be complete when handling of the message is completed.
        /// </returns>
        async Task IEventListener.Signal(string id, CancellationToken token, Func<EventData> messageData)
        {
            using (NoSynchronizationContext)
            {
                if (token.IsCancellationRequested) return;

                switch (id)
                {
                    case Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{messageData().Message ?? string.Empty}");
                        return;
                    }
                    case Runtime.Events.Warning:
                    {
                        WriteWarning($"{messageData().Message ?? string.Empty}");
                        return;
                    }
                    case Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data, new[] {data.Message});
                        return;
                    }
                    case Runtime.Events.Debug:
                    {
                        WriteDebug($"{messageData().Message ?? string.Empty}");
                        return;
                    }
                    case Runtime.Events.Error:
                    {
                        WriteError(new ErrorRecord(new Exception(messageData().Message), string.Empty,
                            ErrorCategory.NotSpecified, null));
                        return;
                    }
                }

                await Module.Instance.Signal(id, token, messageData,
                    (i, t, m) => ((IEventListener) this).Signal(i, t, () => EventDataConverter.ConvertFrom(m())),
                    InvocationInformation, ParameterSetName, null);
                if (token.IsCancellationRequested) return;
                WriteDebug($"{id}: {messageData().Message ?? string.Empty}");
            }
        }

        /// <summary>
        ///     <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of
        ///     what
        ///     happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">
        ///     the body result as a <see cref="MgAction" /> from the remote call
        /// </param>
        /// <param name="returnNow">
        ///     /// Determines if the rest of the onCreated method should be processed, or if the method should
        ///     return immediately (set to true to skip further processing )
        /// </param>
        private void overrideOnCreated(HttpResponseMessage responseMessage, Task<MgAction> response,
            ref Task<bool> returnNow)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        ///     (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break) AttachDebugger.Break();
            this.Signal(Runtime.Events.CmdletBeginProcessing).Wait();
            if (((IEventListener) this).Token.IsCancellationRequested) return;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            this.Signal(Runtime.Events.CmdletEndProcessing).Wait();
            if (((IEventListener) this).Token.IsCancellationRequested) return;
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            this.Signal(Runtime.Events.CmdletProcessRecordStart).Wait();
            if (((IEventListener) this).Token.IsCancellationRequested) return;
            try
            {
                // work
                if (ShouldProcess("Call remote 'SecurityCreateSecurityActions' operation"))
                    using (var asyncCommandRuntime = new AsyncCommandRuntime(this, ((IEventListener) this).Token))
                    {
                        asyncCommandRuntime.Wait(ProcessRecordAsync(), ((IEventListener) this).Token);
                    }
            }
            catch (AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach (var innerException in aggregateException.Flatten().InnerExceptions)
                {
                    this.Signal(Runtime.Events.CmdletException,
                            $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}")
                        .Wait();
                    if (((IEventListener) this).Token.IsCancellationRequested) return;
                    // Write exception out to error channel.
                    WriteError(new ErrorRecord(innerException, string.Empty, ErrorCategory.NotSpecified, null));
                }
            }
            catch (Exception exception) when (exception as PipelineStoppedException == null ||
                                              (exception as PipelineStoppedException).InnerException != null)
            {
                this.Signal(Runtime.Events.CmdletException,
                    $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait();
                if (((IEventListener) this).Token.IsCancellationRequested) return;
                // Write exception out to error channel.
                WriteError(new ErrorRecord(exception, string.Empty, ErrorCategory.NotSpecified, null));
            }
            finally
            {
                this.Signal(Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        ///     A <see cref="Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async Task ProcessRecordAsync()
        {
            using (NoSynchronizationContext)
            {
                //Microsoft.Graph.PowerShell.Runtime.DictionaryExtensions.HashTableToDictionary<global::System.Object>(AdditionalProperties,BodyParameterBody.AdditionalProperties);
                await this.Signal(Runtime.Events.CmdletProcessRecordAsyncStart);
                if (((IEventListener) this).Token.IsCancellationRequested) return;
                await this.Signal(Runtime.Events.CmdletGetPipeline);
                if (((IEventListener) this).Token.IsCancellationRequested) return;
                Pipeline = Module.Instance.CreatePipeline(InvocationInformation, ParameterSetName);
                if (null != HttpPipelinePrepend)
                    Pipeline.Prepend((CommandRuntime as IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ??
                                     HttpPipelinePrepend);
                if (null != HttpPipelineAppend)
                    Pipeline.Append((CommandRuntime as IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ??
                                    HttpPipelineAppend);
                // get the client instance
                try
                {
                    await this.Signal(Runtime.Events.CmdletBeforeAPICall);
                    if (((IEventListener) this).Token.IsCancellationRequested) return;
                    //await this.GraphClient.SecurityCreateSecurityActions(BodyParameterBody, onCreated, onDefault, this, Pipeline);
                    await this.Signal(Runtime.Events.CmdletAfterAPICall);
                    if (((IEventListener) this).Token.IsCancellationRequested) return;
                }
                catch (UndeclaredResponseException urexception)
                {
                    WriteError(new ErrorRecord(urexception, urexception.StatusCode.ToString(),
                        ErrorCategory.InvalidOperation, new {body = BodyParameterBody})
                    {
                        ErrorDetails = new ErrorDetails(urexception.Message) {RecommendedAction = urexception.Action}
                    });
                }
                finally
                {
                    await this.Signal(Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((IEventListener) this).Cancel();
            base.StopProcessing();
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">
        ///     the body result as a <see cref="MgAction" /> from the remote call
        /// </param>
        /// <returns>
        ///     A <see cref="Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async Task onCreated(HttpResponseMessage responseMessage, Task<MgAction> response)
        {
            using (NoSynchronizationContext)
            {
                var _returnNow = Task.FromResult(false);
                // if overrideOnCreated has returned true, then return right away.
                if (null != _returnNow && await _returnNow) return;
                // onCreated - response for 201 / application/json
                // (await response) // should be Microsoft.Graph.PowerShell.Security.Models.MgAction
                WriteObject(await response);
            }
        }

        /// <summary>
        ///     a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">
        ///     the body result as a <see cref="IOdataError" /> from the remote
        ///     call
        /// </param>
        /// <returns>
        ///     A <see cref="Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async Task onDefault(HttpResponseMessage responseMessage, Task<OdataError> response)
        {
            using (NoSynchronizationContext)
            {
                var _returnNow = Task.FromResult(false);
                // if overrideOnDefault has returned true, then return right away.
                if (null != _returnNow && await _returnNow) return;
                // Error Response : default
                // Unrecognized Response. Create an error record based on what we have.
                var ex = new RestException<OdataError>(responseMessage, await response);
                WriteError(new ErrorRecord(ex, ex.Code, ErrorCategory.InvalidOperation, new {body = BodyParameterBody})
                {
                    ErrorDetails = new ErrorDetails(ex.Message) {RecommendedAction = ex.Action}
                });
            }
        }
    }
}