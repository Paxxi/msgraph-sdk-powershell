// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6306, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System.Threading;
using System.Threading.Tasks;
using Microsoft.Graph.PowerShell.Runtime;

namespace Microsoft.Graph.PowerShell.Cmdlets
{
    using static Microsoft.Graph.PowerShell.Runtime.Extensions;

    /// <summary>Read-only. Nullable.</summary>
    /// <remarks>
    /// [OpenAPI] security_CreateAlerts=>POST:"/security/alerts"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"MgSecurityAlert_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlert))]
    [global::Microsoft.Graph.PowerShell.Description(@"Read-only. Nullable.")]
    [global::Microsoft.Graph.PowerShell.Generated]
    [global::Microsoft.Graph.PowerShell.Profile("v1.0-beta")]
    public partial class NewMgSecurityAlert_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Graph.PowerShell.Runtime.IEventListener
    {
        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>
        /// The <see cref="CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Name or alias of the activity group (attacker) this alert is attributed to.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Name or alias of the activity group (attacker) this alert is attributed to.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name or alias of the activity group (attacker) this alert is attributed to.",
        SerializedName = @"activityGroupName",
        PossibleTypes = new [] { typeof(string) })]
        public string ActivityGroupName { get => BodyParameterBody.ActivityGroupName ?? null; set => BodyParameterBody.ActivityGroupName = value; }

        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Additional Parameters")]
        public global::System.Collections.Hashtable AdditionalProperties { get; set; } = new System.Collections.Hashtable();

        /// <summary>.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"alertDetections",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlertDetection) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlertDetection[] AlertDetections { get => BodyParameterBody.AlertDetections ?? null /* arrayOf */; set => BodyParameterBody.AlertDetections = value; }

        /// <summary>
        /// Name of the analyst the alert is assigned to for triage, investigation, or remediation (supports update).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Name of the analyst the alert is assigned to for triage, investigation, or remediation (supports update).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the analyst the alert is assigned to for triage, investigation, or remediation (supports update).",
        SerializedName = @"assignedTo",
        PossibleTypes = new [] { typeof(string) })]
        public string AssignedTo { get => BodyParameterBody.AssignedTo ?? null; set => BodyParameterBody.AssignedTo = value; }

        /// <summary>Azure subscription ID, present if this alert is related to an Azure resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Azure subscription ID, present if this alert is related to an Azure resource.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure subscription ID, present if this alert is related to an Azure resource.",
        SerializedName = @"azureSubscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        public string AzureSubscriptionId { get => BodyParameterBody.AzureSubscriptionId ?? null; set => BodyParameterBody.AzureSubscriptionId = value; }

        /// <summary>Azure Active Directory tenant ID. Required.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Azure Active Directory tenant ID. Required.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Active Directory tenant ID. Required.",
        SerializedName = @"azureTenantId",
        PossibleTypes = new [] { typeof(string) })]
        public string AzureTenantId { get => BodyParameterBody.AzureTenantId ?? null; set => BodyParameterBody.AzureTenantId = value; }

        /// <summary>Backing field for <see cref="BodyParameterBody" /> property.</summary>
        private Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlert _bodyParameterBody= new Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlert();

        /// <summary>alert</summary>
        private Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlert BodyParameterBody { get => this._bodyParameterBody; set => this._bodyParameterBody = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Category of the alert (for example, credentialTheft, ransomware, etc.).</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Category of the alert (for example, credentialTheft, ransomware, etc.).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Category of the alert (for example, credentialTheft, ransomware, etc.).",
        SerializedName = @"category",
        PossibleTypes = new [] { typeof(string) })]
        public string Category { get => BodyParameterBody.Category ?? null; set => BodyParameterBody.Category = value; }

        /// <summary>The reference to the client API class.</summary>
        public Client Client => Microsoft.Graph.PowerShell.Module.Instance.Client;

        /// <summary>
        /// Time at which the alert was closed. The Timestamp type represents date and time information using ISO 8601 format and
        /// is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z (supports update).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Time at which the alert was closed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z (supports update).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time at which the alert was closed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z (supports update).",
        SerializedName = @"closedDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime ClosedDateTime { get => BodyParameterBody.ClosedDateTime ?? default(global::System.DateTime); set => BodyParameterBody.ClosedDateTime = value; }

        /// <summary>
        /// Security-related stateful information generated by the provider about the cloud application/s related to this alert.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Security-related stateful information generated by the provider about the cloud application/s related to this alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Security-related stateful information generated by the provider about the cloud application/s related to this alert.",
        SerializedName = @"cloudAppStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphCloudAppSecurityState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphCloudAppSecurityState[] CloudAppStates { get => BodyParameterBody.CloudAppStates ?? null /* arrayOf */; set => BodyParameterBody.CloudAppStates = value; }

        /// <summary>
        /// Customer-provided comments on alert (for customer alert management) (supports update).
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Customer-provided comments on alert (for customer alert management) (supports update).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Customer-provided comments on alert (for customer alert management) (supports update).",
        SerializedName = @"comments",
        PossibleTypes = new [] { typeof(string) })]
        public string[] Comments { get => BodyParameterBody.Comments ?? null /* arrayOf */; set => BodyParameterBody.Comments = value; }

        /// <summary>Confidence of the detection logic (percentage between 1-100).</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Confidence of the detection logic (percentage between 1-100).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Confidence of the detection logic (percentage between 1-100).",
        SerializedName = @"confidence",
        PossibleTypes = new [] { typeof(int) })]
        public int Confidence { get => BodyParameterBody.Confidence ?? default(int); set => BodyParameterBody.Confidence = value; }

        /// <summary>
        /// Time at which the alert was created by the alert provider. The Timestamp type represents date and time information using
        /// ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Time at which the alert was created by the alert provider. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time at which the alert was created by the alert provider. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.",
        SerializedName = @"createdDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime CreatedDateTime { get => BodyParameterBody.CreatedDateTime ?? default(global::System.DateTime); set => BodyParameterBody.CreatedDateTime = value; }

        /// <summary>Alert description.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Alert description.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Alert description.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        public string Description { get => BodyParameterBody.Description ?? null; set => BodyParameterBody.Description = value; }

        /// <summary>
        /// Set of alerts related to this alert entity (each alert is pushed to the SIEM as a separate record).
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Set of alerts related to this alert entity (each alert is pushed to the SIEM as a separate record).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Set of alerts related to this alert entity (each alert is pushed to the SIEM as a separate record).",
        SerializedName = @"detectionIds",
        PossibleTypes = new [] { typeof(string) })]
        public string[] DetectionIds { get => BodyParameterBody.DetectionIds ?? null /* arrayOf */; set => BodyParameterBody.DetectionIds = value; }

        /// <summary>
        /// Time at which the event(s) that served as the trigger(s) to generate the alert occurred. The Timestamp type represents
        /// date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is
        /// 2014-01-01T00:00:00Z. Required.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Time at which the event(s) that served as the trigger(s) to generate the alert occurred. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time at which the event(s) that served as the trigger(s) to generate the alert occurred. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.",
        SerializedName = @"eventDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime EventDateTime { get => BodyParameterBody.EventDateTime ?? default(global::System.DateTime); set => BodyParameterBody.EventDateTime = value; }

        /// <summary>alertFeedback</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "alertFeedback")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"alertFeedback",
        SerializedName = @"feedback",
        PossibleTypes = new [] { typeof(string) })]
        public string Feedback { get => BodyParameterBody.Feedback ?? null; set => BodyParameterBody.Feedback = value; }

        /// <summary>
        /// Security-related stateful information generated by the provider about the file(s) related to this alert.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Security-related stateful information generated by the provider about the file(s) related to this alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Security-related stateful information generated by the provider about the file(s) related to this alert.",
        SerializedName = @"fileStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphFileSecurityState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphFileSecurityState[] FileStates { get => BodyParameterBody.FileStates ?? null /* arrayOf */; set => BodyParameterBody.FileStates = value; }

        /// <summary>
        /// A collection of alertHistoryStates comprising an audit log of all updates made to an alert.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A collection of alertHistoryStates comprising an audit log of all updates made to an alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A collection of alertHistoryStates comprising an audit log of all updates made to an alert.",
        SerializedName = @"historyStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlertHistoryState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlertHistoryState[] HistoryStates { get => BodyParameterBody.HistoryStates ?? null /* arrayOf */; set => BodyParameterBody.HistoryStates = value; }

        /// <summary>
        /// Security-related stateful information generated by the provider about the host(s) related to this alert.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Security-related stateful information generated by the provider about the host(s) related to this alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Security-related stateful information generated by the provider about the host(s) related to this alert.",
        SerializedName = @"hostStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphHostSecurityState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphHostSecurityState[] HostStates { get => BodyParameterBody.HostStates ?? null /* arrayOf */; set => BodyParameterBody.HostStates = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Read-only.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Read-only.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Read-only.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string Id { get => BodyParameterBody.Id ?? null; set => BodyParameterBody.Id = value; }

        /// <summary>IDs of incidents related to current alert.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "IDs of incidents related to current alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IDs of incidents related to current alert.",
        SerializedName = @"incidentIds",
        PossibleTypes = new [] { typeof(string) })]
        public string[] IncidentIds { get => BodyParameterBody.IncidentIds ?? null /* arrayOf */; set => BodyParameterBody.IncidentIds = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"investigationSecurityStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphInvestigationSecurityState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphInvestigationSecurityState[] InvestigationSecurityStates { get => BodyParameterBody.InvestigationSecurityStates ?? null /* arrayOf */; set => BodyParameterBody.InvestigationSecurityStates = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"lastEventDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime LastEventDateTime { get => BodyParameterBody.LastEventDateTime ?? default(global::System.DateTime); set => BodyParameterBody.LastEventDateTime = value; }

        /// <summary>
        /// Time at which the alert entity was last modified. The Timestamp type represents date and time information using ISO 8601
        /// format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Time at which the alert entity was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time at which the alert entity was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.",
        SerializedName = @"lastModifiedDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime LastModifiedDateTime { get => BodyParameterBody.LastModifiedDateTime ?? default(global::System.DateTime); set => BodyParameterBody.LastModifiedDateTime = value; }

        /// <summary>Threat Intelligence pertaining to malware related to this alert.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Threat Intelligence pertaining to malware related to this alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Threat Intelligence pertaining to malware related to this alert.",
        SerializedName = @"malwareStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphMalwareState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphMalwareState[] MalwareStates { get => BodyParameterBody.MalwareStates ?? null /* arrayOf */; set => BodyParameterBody.MalwareStates = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"messageSecurityStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphMessageSecurityState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphMessageSecurityState[] MessageSecurityStates { get => BodyParameterBody.MessageSecurityStates ?? null /* arrayOf */; set => BodyParameterBody.MessageSecurityStates = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Graph.PowerShell.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Graph.PowerShell.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// Security-related stateful information generated by the provider about the network connection(s) related to this alert.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Security-related stateful information generated by the provider about the network connection(s) related to this alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Security-related stateful information generated by the provider about the network connection(s) related to this alert.",
        SerializedName = @"networkConnections",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphNetworkConnection) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphNetworkConnection[] NetworkConnections { get => BodyParameterBody.NetworkConnections ?? null /* arrayOf */; set => BodyParameterBody.NetworkConnections = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Graph.PowerShell.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Graph.PowerShell.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>
        /// Security-related stateful information generated by the provider about the process or processes related to this alert.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Security-related stateful information generated by the provider about the process or processes related to this alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Security-related stateful information generated by the provider about the process or processes related to this alert.",
        SerializedName = @"processes",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphProcess) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphProcess[] Processes { get => BodyParameterBody.Processes ?? null /* arrayOf */; set => BodyParameterBody.Processes = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        /// Vendor/provider recommended action(s) to take as a result of the alert (for example, isolate machine, enforce2FA, reimage
        /// host).
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Vendor/provider recommended action(s) to take as a result of the alert (for example, isolate machine, enforce2FA, reimage host).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Vendor/provider recommended action(s) to take as a result of the alert (for example, isolate machine, enforce2FA, reimage host).",
        SerializedName = @"recommendedActions",
        PossibleTypes = new [] { typeof(string) })]
        public string[] RecommendedActions { get => BodyParameterBody.RecommendedActions ?? null /* arrayOf */; set => BodyParameterBody.RecommendedActions = value; }

        /// <summary>
        /// Security-related stateful information generated by the provider about the registry keys related to this alert.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Security-related stateful information generated by the provider about the registry keys related to this alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Security-related stateful information generated by the provider about the registry keys related to this alert.",
        SerializedName = @"registryKeyStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphRegistryKeyState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphRegistryKeyState[] RegistryKeyStates { get => BodyParameterBody.RegistryKeyStates ?? null /* arrayOf */; set => BodyParameterBody.RegistryKeyStates = value; }

        /// <summary>
        /// Resources related to current alert. For example, for some alerts this can have the Azure Resource value.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resources related to current alert. For example, for some alerts this can have the Azure Resource value.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resources related to current alert. For example, for some alerts this can have the Azure Resource value.",
        SerializedName = @"securityResources",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphSecurityResource) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphSecurityResource[] SecurityResources { get => BodyParameterBody.SecurityResources ?? null /* arrayOf */; set => BodyParameterBody.SecurityResources = value; }

        /// <summary>alertSeverity</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "alertSeverity")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"alertSeverity",
        SerializedName = @"severity",
        PossibleTypes = new [] { typeof(string) })]
        public string Severity { get => BodyParameterBody.Severity ?? null; set => BodyParameterBody.Severity = value; }

        /// <summary>
        /// Hyperlinks (URIs) to the source material related to the alert, for example, provider's user interface for alerts or log
        /// search, etc.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Hyperlinks (URIs) to the source material related to the alert, for example, provider's user interface for alerts or log search, etc.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Hyperlinks (URIs) to the source material related to the alert, for example, provider's user interface for alerts or log search, etc.",
        SerializedName = @"sourceMaterials",
        PossibleTypes = new [] { typeof(string) })]
        public string[] SourceMaterials { get => BodyParameterBody.SourceMaterials ?? null /* arrayOf */; set => BodyParameterBody.SourceMaterials = value; }

        /// <summary>alertStatus</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "alertStatus")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"alertStatus",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        public string Status { get => BodyParameterBody.Status ?? null; set => BodyParameterBody.Status = value; }

        /// <summary>
        /// User-definable labels that can be applied to an alert and can serve as filter conditions (for example 'HVA', 'SAW', etc.)
        /// (supports update).
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "User-definable labels that can be applied to an alert and can serve as filter conditions (for example 'HVA', 'SAW', etc.) (supports update).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User-definable labels that can be applied to an alert and can serve as filter conditions (for example 'HVA', 'SAW', etc.) (supports update).",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(string) })]
        public string[] Tags { get => BodyParameterBody.Tags ?? null /* arrayOf */; set => BodyParameterBody.Tags = value; }

        /// <summary>Alert title. Required.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Alert title. Required.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Alert title. Required.",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        public string Title { get => BodyParameterBody.Title ?? null; set => BodyParameterBody.Title = value; }

        /// <summary>
        /// Security-related information about the specific properties that triggered the alert (properties appearing in the alert).
        /// Alerts might contain information about multiple users, hosts, files, ip addresses. This field indicates which properties
        /// triggered the alert generation.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Security-related information about the specific properties that triggered the alert (properties appearing in the alert). Alerts might contain information about multiple users, hosts, files, ip addresses. This field indicates which properties triggered the alert generation.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Security-related information about the specific properties that triggered the alert (properties appearing in the alert). Alerts might contain information about multiple users, hosts, files, ip addresses. This field indicates which properties triggered the alert generation.",
        SerializedName = @"triggers",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlertTrigger) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlertTrigger[] Triggers { get => BodyParameterBody.Triggers ?? null /* arrayOf */; set => BodyParameterBody.Triggers = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"uriClickSecurityStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphUriClickSecurityState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphUriClickSecurityState[] UriClickSecurityStates { get => BodyParameterBody.UriClickSecurityStates ?? null /* arrayOf */; set => BodyParameterBody.UriClickSecurityStates = value; }

        /// <summary>
        /// Security-related stateful information generated by the provider about the user accounts related to this alert.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Security-related stateful information generated by the provider about the user accounts related to this alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Security-related stateful information generated by the provider about the user accounts related to this alert.",
        SerializedName = @"userStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphUserSecurityState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphUserSecurityState[] UserStates { get => BodyParameterBody.UserStates ?? null /* arrayOf */; set => BodyParameterBody.UserStates = value; }

        /// <summary>securityVendorInformation</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "securityVendorInformation")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"securityVendorInformation",
        SerializedName = @"vendorInformation",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphSecurityVendorInformation) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphSecurityVendorInformation VendorInformation { get => BodyParameterBody.VendorInformation ?? null /* object */; set => BodyParameterBody.VendorInformation = value; }

        /// <summary>
        /// Threat intelligence pertaining to one or more vulnerabilities related to this alert.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Threat intelligence pertaining to one or more vulnerabilities related to this alert.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Threat intelligence pertaining to one or more vulnerabilities related to this alert.",
        SerializedName = @"vulnerabilityStates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphVulnerabilityState) })]
        public Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphVulnerabilityState[] VulnerabilityStates { get => BodyParameterBody.VulnerabilityStates ?? null /* arrayOf */; set => BodyParameterBody.VulnerabilityStates = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlert" /> from
        /// the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlert> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="IOdataError" /> from the remote
        /// call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<OdataError> response, ref global::System.Threading.Tasks.Task<bool> returnNow) => this.OverrideOnDefault(responseMessage,ref returnNow);

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<OdataError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Graph.PowerShell.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletEndProcessing).Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Graph.PowerShell.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Graph.PowerShell.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Graph.PowerShell.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data, new[] { data.Message });
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Graph.PowerShell.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Graph.PowerShell.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Graph.PowerShell.Runtime.EventData ), InvocationInformation, this.ParameterSetName, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewMgSecurityAlert_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewMgSecurityAlert_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            try
            {
                // work
                if (ShouldProcess($"Call remote 'SecurityCreateAlerts' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Graph.PowerShell.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                //Microsoft.Graph.PowerShell.Runtime.DictionaryExtensions.HashTableToDictionary<global::System.Object>(AdditionalProperties,BodyParameterBody.AdditionalProperties);
                await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordAsyncStart); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Graph.PowerShell.Module.Instance.CreatePipeline(InvocationInformation, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Graph.PowerShell.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Graph.PowerShell.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    //await this.Client.SecurityCreateAlerts(BodyParameterBody, onCreated, onDefault, this, Pipeline);
                    await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Graph.PowerShell.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  body=BodyParameterBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlert" /> from
        /// the remote call</param>
        /// <returns>
        /// A <see cref="Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlert> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, response, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 / application/json
                // (await response) // should be Microsoft.Graph.PowerShell.Security.Models.MicrosoftGraphAlert
                WriteObject((await response));
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="IOdataError" /> from the remote
        /// call</param>
        /// <returns>
        /// A <see cref="Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<OdataError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                // Unrecognized Response. Create an error record based on what we have.
                var ex = new Microsoft.Graph.PowerShell.Runtime.RestException<OdataError>(responseMessage, await response);
                WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { body=BodyParameterBody })
                {
                  ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                });
            }
        }
    }
}