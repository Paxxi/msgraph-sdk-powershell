using System;
using System.Collections.Generic;
using System.Text;

namespace Microsoft.Graph.PowerShell.generated.api
{
    class Old
    {
        ///// <summary>Invoke action cancelSecurityAction</summary>
        ///// <param name="securityActionId">key: id of securityAction</param>
        ///// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        ///// <param name="onDefault">
        /////     a delegate that is called when the remote service returns default (any response code not handled
        /////     elsewhere).
        ///// </param>
        ///// <param name="eventListener">
        /////     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        /////     receive events.
        ///// </param>
        ///// <param name="sender">
        /////     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        /////     request.
        ///// </param>
        ///// <returns>
        /////     A <see cref="Task" /> that will be complete when handling of the response is
        /////     completed.
        ///// </returns>
        //public async Task SecurityActionsCancelSecurityAction(string securityActionId,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/securityActions/"
        //                + Uri.EscapeDataString(securityActionId)
        //                + "/microsoft.graph.cancelSecurityAction"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityActionsCancelSecurityAction_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Invoke action cancelSecurityAction</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityActionsCancelSecurityActionViaIdentity(
        //        string viaIdentity,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                        "^/security/securityActions/(?<securityActionid>[^/]+)/microsoft.graph.cancelSecurityAction$")
        //                    .Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/securityActions/{securityAction-id}/microsoft.graph.cancelSecurityAction'");

        //            // replace URI parameters with values from identity
        //            var securityActionId = _match.Groups["securityAction-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/securityActions/"
        //                + securityActionId
        //                + "/microsoft.graph.cancelSecurityAction"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityActionsCancelSecurityAction_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityActionsCancelSecurityAction" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityActionsCancelSecurityAction_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateAlerts(MicrosoftGraphAlert body,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphAlert>, Task>
        //            onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/alerts"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateAlerts_Call(request, onCreated, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateAlerts1(MicrosoftGraphAlert body,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphAlert>, Task>
        //            onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/alerts"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateAlerts1_Call(request, onCreated, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityCreateAlerts1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateAlerts1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphAlert>, Task>
        //            onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphAlert.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateAlerts1" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateAlerts1_Validate(MicrosoftGraphAlert body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityCreateAlerts" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateAlerts_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphAlert>, Task>
        //            onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphAlert.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateAlerts" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateAlerts_Validate(MicrosoftGraphAlert body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Create new navigation property to cloudAppSecurityProfiles for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateCloudAppSecurityProfiles(
        //        MicrosoftGraphCloudAppSecurityProfile body,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphCloudAppSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/cloudAppSecurityProfiles"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateCloudAppSecurityProfiles_Call(request, onCreated, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityCreateCloudAppSecurityProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateCloudAppSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphCloudAppSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphCloudAppSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateCloudAppSecurityProfiles" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateCloudAppSecurityProfiles_Validate(
        //        MicrosoftGraphCloudAppSecurityProfile body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Create new navigation property to domainSecurityProfiles for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateDomainSecurityProfiles(
        //        MicrosoftGraphDomainSecurityProfile body,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphDomainSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/domainSecurityProfiles"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateDomainSecurityProfiles_Call(request, onCreated, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityCreateDomainSecurityProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateDomainSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphDomainSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphDomainSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateDomainSecurityProfiles" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateDomainSecurityProfiles_Validate(
        //        MicrosoftGraphDomainSecurityProfile body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Create new navigation property to fileSecurityProfiles for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateFileSecurityProfiles(
        //        MicrosoftGraphFileSecurityProfile body,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphFileSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/fileSecurityProfiles"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateFileSecurityProfiles_Call(request, onCreated, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityCreateFileSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateFileSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphFileSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphFileSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateFileSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateFileSecurityProfiles_Validate(
        //        MicrosoftGraphFileSecurityProfile body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Create new navigation property to hostSecurityProfiles for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateHostSecurityProfiles(
        //        MicrosoftGraphHostSecurityProfile body,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphHostSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/hostSecurityProfiles"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateHostSecurityProfiles_Call(request, onCreated, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityCreateHostSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateHostSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphHostSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphHostSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateHostSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateHostSecurityProfiles_Validate(
        //        MicrosoftGraphHostSecurityProfile body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Create new navigation property to ipSecurityProfiles for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateIPSecurityProfiles(
        //        MicrosoftGraphIPSecurityProfile body,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphIPSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/ipSecurityProfiles"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateIPSecurityProfiles_Call(request, onCreated, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityCreateIPSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateIPSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphIPSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphIPSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateIPSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateIPSecurityProfiles_Validate(
        //        MicrosoftGraphIPSecurityProfile body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Create new navigation property to providerTenantSettings for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateProviderTenantSettings(
        //        MicrosoftGraphProviderTenantSetting body,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphProviderTenantSetting>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/providerTenantSettings"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateProviderTenantSettings_Call(request, onCreated, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityCreateProviderTenantSettings" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateProviderTenantSettings_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphProviderTenantSetting>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphProviderTenantSetting.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateProviderTenantSettings" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateProviderTenantSettings_Validate(
        //        MicrosoftGraphProviderTenantSetting body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Create new navigation property to secureScoreControlProfiles for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateSecureScoreControlProfiles(
        //        MicrosoftGraphSecureScoreControlProfile body,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecureScoreControlProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScoreControlProfiles"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateSecureScoreControlProfiles_Call(request, onCreated, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Create new navigation property to secureScoreControlProfiles for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateSecureScoreControlProfiles1(
        //        MicrosoftGraphSecureScoreControlProfile body,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecureScoreControlProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScoreControlProfiles"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateSecureScoreControlProfiles1_Call(request, onCreated, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityCreateSecureScoreControlProfiles1" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateSecureScoreControlProfiles1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecureScoreControlProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphSecureScoreControlProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateSecureScoreControlProfiles1" /> method. Call this like the actual
        //    ///     call,
        //    ///     but you will get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateSecureScoreControlProfiles1_Validate(
        //        MicrosoftGraphSecureScoreControlProfile body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityCreateSecureScoreControlProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateSecureScoreControlProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecureScoreControlProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphSecureScoreControlProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateSecureScoreControlProfiles" /> method. Call this like the actual
        //    ///     call,
        //    ///     but you will get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateSecureScoreControlProfiles_Validate(
        //        MicrosoftGraphSecureScoreControlProfile body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Create new navigation property to secureScores for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateSecureScores(MicrosoftGraphSecureScore body,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecureScore>, Task>
        //            onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScores"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateSecureScores_Call(request, onCreated, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Create new navigation property to secureScores for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateSecureScores1(MicrosoftGraphSecureScore body,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecureScore>, Task>
        //            onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScores"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateSecureScores1_Call(request, onCreated, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityCreateSecureScores1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateSecureScores1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecureScore>, Task>
        //            onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphSecureScore.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateSecureScores1" /> method. Call this like the actual call, but you
        //    ///     will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateSecureScores1_Validate(
        //        MicrosoftGraphSecureScore body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityCreateSecureScores" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateSecureScores_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecureScore>, Task>
        //            onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphSecureScore.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateSecureScores" /> method. Call this like the actual call, but you
        //    ///     will get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateSecureScores_Validate(
        //        MicrosoftGraphSecureScore body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }


        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateSecurityActions" /> method. Call this like the actual call, but you
        //    ///     will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateSecurityActions_Validate(
        //        MicrosoftGraphSecurityAction body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Create new navigation property to tiIndicators for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateTiIndicators(MicrosoftGraphTiIndicator body,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphTiIndicator>, Task>
        //            onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateTiIndicators_Call(request, onCreated, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityCreateTiIndicators" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateTiIndicators_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphTiIndicator>, Task>
        //            onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphTiIndicator.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateTiIndicators" /> method. Call this like the actual call, but you
        //    ///     will get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateTiIndicators_Validate(
        //        MicrosoftGraphTiIndicator body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Create new navigation property to userSecurityProfiles for security</summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityCreateUserSecurityProfiles(
        //        MicrosoftGraphUserSecurityProfile body,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphUserSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/userSecurityProfiles"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityCreateUserSecurityProfiles_Call(request, onCreated, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityCreateUserSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateUserSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphUserSecurityProfile>,
        //            Task> onCreated,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.Created:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onCreated(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphUserSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityCreateUserSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="body">New navigation property</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityCreateUserSecurityProfiles_Validate(
        //        MicrosoftGraphUserSecurityProfile body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteAlerts(string alertId, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/alerts/"
        //                + Uri.EscapeDataString(alertId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteAlerts_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteAlerts1(string alertId, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/alerts/"
        //                + Uri.EscapeDataString(alertId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteAlerts1_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteAlerts1ViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/alerts/(?<alertId>[^/]+)$")
        //                .Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/alerts/{alertId}'");

        //            // replace URI parameters with values from identity
        //            var alertId = _match.Groups["alertId"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/alerts/"
        //                + alertId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteAlerts1_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityDeleteAlerts1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteAlerts1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteAlerts1" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteAlerts1_Validate(string alertId,
        //        string ifMatch, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(alertId), alertId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteAlertsViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/alerts/(?<alertId>[^/]+)$")
        //                .Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/alerts/{alertId}'");

        //            // replace URI parameters with values from identity
        //            var alertId = _match.Groups["alertId"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/alerts/"
        //                + alertId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteAlerts_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityDeleteAlerts" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteAlerts_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteAlerts" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteAlerts_Validate(string alertId, string ifMatch,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(alertId), alertId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property cloudAppSecurityProfiles for security</summary>
        //    /// <param name="cloudAppSecurityProfileId">key: id of cloudAppSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteCloudAppSecurityProfiles(
        //        string cloudAppSecurityProfileId, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/cloudAppSecurityProfiles/"
        //                + Uri.EscapeDataString(cloudAppSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteCloudAppSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property cloudAppSecurityProfiles for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteCloudAppSecurityProfilesViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/cloudAppSecurityProfiles/(?<cloudAppSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/cloudAppSecurityProfiles/{cloudAppSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var cloudAppSecurityProfileId = _match.Groups["cloudAppSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/cloudAppSecurityProfiles/"
        //                + cloudAppSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteCloudAppSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityDeleteCloudAppSecurityProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteCloudAppSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteCloudAppSecurityProfiles" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="cloudAppSecurityProfileId">key: id of cloudAppSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteCloudAppSecurityProfiles_Validate(
        //        string cloudAppSecurityProfileId, string ifMatch,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(cloudAppSecurityProfileId), cloudAppSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property domainSecurityProfiles for security</summary>
        //    /// <param name="domainSecurityProfileId">key: id of domainSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteDomainSecurityProfiles(
        //        string domainSecurityProfileId, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/domainSecurityProfiles/"
        //                + Uri.EscapeDataString(domainSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteDomainSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property domainSecurityProfiles for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteDomainSecurityProfilesViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/domainSecurityProfiles/(?<domainSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/domainSecurityProfiles/{domainSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var domainSecurityProfileId = _match.Groups["domainSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/domainSecurityProfiles/"
        //                + domainSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteDomainSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityDeleteDomainSecurityProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteDomainSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteDomainSecurityProfiles" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="domainSecurityProfileId">key: id of domainSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteDomainSecurityProfiles_Validate(
        //        string domainSecurityProfileId, string ifMatch,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(domainSecurityProfileId), domainSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property fileSecurityProfiles for security</summary>
        //    /// <param name="fileSecurityProfileId">key: id of fileSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteFileSecurityProfiles(
        //        string fileSecurityProfileId, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/fileSecurityProfiles/"
        //                + Uri.EscapeDataString(fileSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteFileSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property fileSecurityProfiles for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteFileSecurityProfilesViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/fileSecurityProfiles/(?<fileSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/fileSecurityProfiles/{fileSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var fileSecurityProfileId = _match.Groups["fileSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/fileSecurityProfiles/"
        //                + fileSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteFileSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityDeleteFileSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteFileSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteFileSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="fileSecurityProfileId">key: id of fileSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteFileSecurityProfiles_Validate(
        //        string fileSecurityProfileId, string ifMatch,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(fileSecurityProfileId), fileSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property hostSecurityProfiles for security</summary>
        //    /// <param name="hostSecurityProfileId">key: id of hostSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteHostSecurityProfiles(
        //        string hostSecurityProfileId, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/hostSecurityProfiles/"
        //                + Uri.EscapeDataString(hostSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteHostSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property hostSecurityProfiles for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteHostSecurityProfilesViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/hostSecurityProfiles/(?<hostSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/hostSecurityProfiles/{hostSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var hostSecurityProfileId = _match.Groups["hostSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/hostSecurityProfiles/"
        //                + hostSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteHostSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityDeleteHostSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteHostSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteHostSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="hostSecurityProfileId">key: id of hostSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteHostSecurityProfiles_Validate(
        //        string hostSecurityProfileId, string ifMatch,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(hostSecurityProfileId), hostSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property ipSecurityProfiles for security</summary>
        //    /// <param name="ipSecurityProfileId">key: id of ipSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteIPSecurityProfiles(string ipSecurityProfileId,
        //        string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/ipSecurityProfiles/"
        //                + Uri.EscapeDataString(ipSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteIPSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property ipSecurityProfiles for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteIPSecurityProfilesViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/ipSecurityProfiles/(?<ipSecurityProfileid>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/ipSecurityProfiles/{ipSecurityProfileid}'");

        //            // replace URI parameters with values from identity
        //            var ipSecurityProfileId = _match.Groups["ipSecurityProfileid"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/ipSecurityProfiles/"
        //                + ipSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteIPSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityDeleteIPSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteIPSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteIPSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="ipSecurityProfileId">key: id of ipSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteIPSecurityProfiles_Validate(
        //        string ipSecurityProfileId, string ifMatch, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(ipSecurityProfileId), ipSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property providerTenantSettings for security</summary>
        //    /// <param name="providerTenantSettingId">key: id of providerTenantSetting</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteProviderTenantSettings(
        //        string providerTenantSettingId, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/providerTenantSettings/"
        //                + Uri.EscapeDataString(providerTenantSettingId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteProviderTenantSettings_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property providerTenantSettings for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteProviderTenantSettingsViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/providerTenantSettings/(?<providerTenantSetting-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/providerTenantSettings/{providerTenantSetting-id}'");

        //            // replace URI parameters with values from identity
        //            var providerTenantSettingId = _match.Groups["providerTenantSetting-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/providerTenantSettings/"
        //                + providerTenantSettingId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteProviderTenantSettings_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityDeleteProviderTenantSettings" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteProviderTenantSettings_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteProviderTenantSettings" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="providerTenantSettingId">key: id of providerTenantSetting</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteProviderTenantSettings_Validate(
        //        string providerTenantSettingId, string ifMatch,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(providerTenantSettingId), providerTenantSettingId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property secureScoreControlProfiles for security</summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteSecureScoreControlProfiles(
        //        string secureScoreControlProfileId, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScoreControlProfiles/"
        //                + Uri.EscapeDataString(secureScoreControlProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteSecureScoreControlProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property secureScoreControlProfiles for security</summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteSecureScoreControlProfiles1(
        //        string secureScoreControlProfileId, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScoreControlProfiles/"
        //                + Uri.EscapeDataString(secureScoreControlProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteSecureScoreControlProfiles1_Call(request, onNoContent, onDefault,
        //                eventListener, sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property secureScoreControlProfiles for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteSecureScoreControlProfiles1ViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                        "^/security/secureScoreControlProfiles/(?<secureScoreControlProfile-id>[^/]+)$")
        //                    .Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScoreControlProfiles/{secureScoreControlProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreControlProfileId = _match.Groups["secureScoreControlProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScoreControlProfiles/"
        //                + secureScoreControlProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteSecureScoreControlProfiles1_Call(request, onNoContent, onDefault,
        //                eventListener, sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityDeleteSecureScoreControlProfiles1" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteSecureScoreControlProfiles1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteSecureScoreControlProfiles1" /> method. Call this like the actual
        //    ///     call,
        //    ///     but you will get validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteSecureScoreControlProfiles1_Validate(
        //        string secureScoreControlProfileId, string ifMatch,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreControlProfileId), secureScoreControlProfileId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property secureScoreControlProfiles for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteSecureScoreControlProfilesViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                        "^/security/secureScoreControlProfiles/(?<secureScoreControlProfile-id>[^/]+)$")
        //                    .Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScoreControlProfiles/{secureScoreControlProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreControlProfileId = _match.Groups["secureScoreControlProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScoreControlProfiles/"
        //                + secureScoreControlProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteSecureScoreControlProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityDeleteSecureScoreControlProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteSecureScoreControlProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteSecureScoreControlProfiles" /> method. Call this like the actual
        //    ///     call,
        //    ///     but you will get validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteSecureScoreControlProfiles_Validate(
        //        string secureScoreControlProfileId, string ifMatch,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreControlProfileId), secureScoreControlProfileId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property secureScores for security</summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteSecureScores(string secureScoreId,
        //        string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScores/"
        //                + Uri.EscapeDataString(secureScoreId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteSecureScores_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property secureScores for security</summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteSecureScores1(string secureScoreId,
        //        string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScores/"
        //                + Uri.EscapeDataString(secureScoreId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteSecureScores1_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property secureScores for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteSecureScores1ViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/secureScores/(?<secureScore-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScores/{secureScore-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreId = _match.Groups["secureScore-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScores/"
        //                + secureScoreId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteSecureScores1_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityDeleteSecureScores1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteSecureScores1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteSecureScores1" /> method. Call this like the actual call, but you
        //    ///     will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteSecureScores1_Validate(string secureScoreId,
        //        string ifMatch, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreId), secureScoreId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property secureScores for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteSecureScoresViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/secureScores/(?<secureScore-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScores/{secureScore-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreId = _match.Groups["secureScore-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScores/"
        //                + secureScoreId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteSecureScores_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityDeleteSecureScores" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteSecureScores_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteSecureScores" /> method. Call this like the actual call, but you
        //    ///     will get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteSecureScores_Validate(string secureScoreId,
        //        string ifMatch, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreId), secureScoreId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property securityActions for security</summary>
        //    /// <param name="securityActionId">key: id of securityAction</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteSecurityActions(string securityActionId,
        //        string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/securityActions/"
        //                + Uri.EscapeDataString(securityActionId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteSecurityActions_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property securityActions for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteSecurityActionsViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/securityActions/(?<securityAction-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/securityActions/{securityAction-id}'");

        //            // replace URI parameters with values from identity
        //            var securityActionId = _match.Groups["securityAction-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/securityActions/"
        //                + securityActionId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteSecurityActions_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityDeleteSecurityActions" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteSecurityActions_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteSecurityActions" /> method. Call this like the actual call, but you
        //    ///     will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="securityActionId">key: id of securityAction</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteSecurityActions_Validate(
        //        string securityActionId, string ifMatch, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(securityActionId), securityActionId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property tiIndicators for security</summary>
        //    /// <param name="tiIndicatorId">key: id of tiIndicator</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteTiIndicators(string tiIndicatorId,
        //        string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators/"
        //                + Uri.EscapeDataString(tiIndicatorId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteTiIndicators_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property tiIndicators for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteTiIndicatorsViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/tiIndicators/(?<tiIndicator-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/tiIndicators/{tiIndicator-id}'");

        //            // replace URI parameters with values from identity
        //            var tiIndicatorId = _match.Groups["tiIndicator-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators/"
        //                + tiIndicatorId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteTiIndicators_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityDeleteTiIndicators" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteTiIndicators_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteTiIndicators" /> method. Call this like the actual call, but you
        //    ///     will get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="tiIndicatorId">key: id of tiIndicator</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteTiIndicators_Validate(string tiIndicatorId,
        //        string ifMatch, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(tiIndicatorId), tiIndicatorId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Delete navigation property userSecurityProfiles for security</summary>
        //    /// <param name="userSecurityProfileId">key: id of userSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteUserSecurityProfiles(
        //        string userSecurityProfileId, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/userSecurityProfiles/"
        //                + Uri.EscapeDataString(userSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteUserSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Delete navigation property userSecurityProfiles for security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityDeleteUserSecurityProfilesViaIdentity(
        //        string viaIdentity, string ifMatch,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/userSecurityProfiles/(?<userSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/userSecurityProfiles/{userSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var userSecurityProfileId = _match.Groups["userSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/userSecurityProfiles/"
        //                + userSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Delete,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // add headers parameters
        //            if (null != ifMatch) request.Headers.Add("If-Match", ifMatch);

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityDeleteUserSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityDeleteUserSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteUserSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityDeleteUserSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="userSecurityProfileId">key: id of userSecurityProfile</param>
        //    /// <param name="ifMatch">ETag</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityDeleteUserSecurityProfiles_Validate(
        //        string userSecurityProfileId, string ifMatch,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(userSecurityProfileId), userSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(ifMatch), ifMatch);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetAlerts(string alertId, string[] Select,
        //        string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphAlert>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/alerts/"
        //                + Uri.EscapeDataString(alertId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetAlerts_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetAlerts1(string alertId, string[] Select,
        //        string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphAlert>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/alerts/"
        //                + Uri.EscapeDataString(alertId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetAlerts1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetAlerts1ViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphAlert>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/alerts/(?<alertId>[^/]+)$")
        //                .Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/alerts/{alertId}'");

        //            // replace URI parameters with values from identity
        //            var alertId = _match.Groups["alertId"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/alerts/"
        //                + alertId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetAlerts1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetAlerts1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetAlerts1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphAlert>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphAlert.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetAlerts1" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetAlerts1_Validate(string alertId, string[] Select,
        //        string[] Expand, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(alertId), alertId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activityGroupName",
        //                        @"alertDetections", @"assignedTo", @"azureSubscriptionId", @"azureTenantId", @"category",
        //                        @"closedDateTime", @"cloudAppStates", @"comments", @"confidence", @"createdDateTime",
        //                        @"description", @"detectionIds", @"eventDateTime", @"feedback", @"fileStates",
        //                        @"historyStates", @"hostStates", @"incidentIds", @"investigationSecurityStates",
        //                        @"lastEventDateTime", @"lastModifiedDateTime", @"malwareStates", @"messageSecurityStates",
        //                        @"networkConnections", @"processes", @"recommendedActions", @"registryKeyStates",
        //                        @"securityResources", @"severity", @"sourceMaterials", @"status", @"tags", @"title",
        //                        @"triggers", @"uriClickSecurityStates", @"userStates", @"vendorInformation",
        //                        @"vulnerabilityStates");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetAlertsViaIdentity(string viaIdentity,
        //        string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphAlert>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/alerts/(?<alertId>[^/]+)$")
        //                .Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/alerts/{alertId}'");

        //            // replace URI parameters with values from identity
        //            var alertId = _match.Groups["alertId"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/alerts/"
        //                + alertId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetAlerts_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetAlerts" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetAlerts_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphAlert>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphAlert.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetAlerts" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetAlerts_Validate(string alertId, string[] Select,
        //        string[] Expand, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(alertId), alertId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activityGroupName",
        //                        @"alertDetections", @"assignedTo", @"azureSubscriptionId", @"azureTenantId", @"category",
        //                        @"closedDateTime", @"cloudAppStates", @"comments", @"confidence", @"createdDateTime",
        //                        @"description", @"detectionIds", @"eventDateTime", @"feedback", @"fileStates",
        //                        @"historyStates", @"hostStates", @"incidentIds", @"investigationSecurityStates",
        //                        @"lastEventDateTime", @"lastModifiedDateTime", @"malwareStates", @"messageSecurityStates",
        //                        @"networkConnections", @"processes", @"recommendedActions", @"registryKeyStates",
        //                        @"securityResources", @"severity", @"sourceMaterials", @"status", @"tags", @"title",
        //                        @"triggers", @"uriClickSecurityStates", @"userStates", @"vendorInformation",
        //                        @"vulnerabilityStates");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get cloudAppSecurityProfiles from security</summary>
        //    /// <param name="cloudAppSecurityProfileId">key: id of cloudAppSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetCloudAppSecurityProfiles(
        //        string cloudAppSecurityProfileId, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphCloudAppSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/cloudAppSecurityProfiles/"
        //                + Uri.EscapeDataString(cloudAppSecurityProfileId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetCloudAppSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get cloudAppSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetCloudAppSecurityProfilesViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphCloudAppSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/cloudAppSecurityProfiles/(?<cloudAppSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/cloudAppSecurityProfiles/{cloudAppSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var cloudAppSecurityProfileId = _match.Groups["cloudAppSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/cloudAppSecurityProfiles/"
        //                + cloudAppSecurityProfileId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetCloudAppSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetCloudAppSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetCloudAppSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphCloudAppSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphCloudAppSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetCloudAppSecurityProfiles" /> method. Call this like the actual call,
        //    ///     but you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="cloudAppSecurityProfileId">key: id of cloudAppSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetCloudAppSecurityProfiles_Validate(
        //        string cloudAppSecurityProfileId, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(cloudAppSecurityProfileId), cloudAppSecurityProfileId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"azureSubscriptionId",
        //                        @"azureTenantId", @"createdDateTime", @"deploymentPackageUrl", @"destinationServiceName",
        //                        @"isSigned", @"lastModifiedDateTime", @"manifest", @"name", @"permissionsRequired",
        //                        @"platform", @"policyName", @"publisher", @"riskScore", @"tags", @"type",
        //                        @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get domainSecurityProfiles from security</summary>
        //    /// <param name="domainSecurityProfileId">key: id of domainSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetDomainSecurityProfiles(
        //        string domainSecurityProfileId, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphDomainSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/domainSecurityProfiles/"
        //                + Uri.EscapeDataString(domainSecurityProfileId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetDomainSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get domainSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetDomainSecurityProfilesViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphDomainSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/domainSecurityProfiles/(?<domainSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/domainSecurityProfiles/{domainSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var domainSecurityProfileId = _match.Groups["domainSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/domainSecurityProfiles/"
        //                + domainSecurityProfileId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetDomainSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetDomainSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetDomainSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphDomainSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphDomainSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetDomainSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="domainSecurityProfileId">key: id of domainSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetDomainSecurityProfiles_Validate(
        //        string domainSecurityProfileId, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(domainSecurityProfileId), domainSecurityProfileId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activityGroupNames",
        //                        @"azureSubscriptionId", @"azureTenantId", @"countHits", @"countInOrg", @"domainCategories",
        //                        @"domainRegisteredDateTime", @"firstSeenDateTime", @"lastSeenDateTime", @"name",
        //                        @"registrant", @"riskScore", @"tags", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get fileSecurityProfiles from security</summary>
        //    /// <param name="fileSecurityProfileId">key: id of fileSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetFileSecurityProfiles(string fileSecurityProfileId,
        //        string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphFileSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/fileSecurityProfiles/"
        //                + Uri.EscapeDataString(fileSecurityProfileId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetFileSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get fileSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetFileSecurityProfilesViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphFileSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/fileSecurityProfiles/(?<fileSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/fileSecurityProfiles/{fileSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var fileSecurityProfileId = _match.Groups["fileSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/fileSecurityProfiles/"
        //                + fileSecurityProfileId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetFileSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetFileSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetFileSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphFileSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphFileSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetFileSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="fileSecurityProfileId">key: id of fileSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetFileSecurityProfiles_Validate(
        //        string fileSecurityProfileId, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(fileSecurityProfileId), fileSecurityProfileId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activityGroupNames",
        //                        @"azureSubscriptionId", @"azureTenantId", @"certificateThumbprint", @"extensions",
        //                        @"fileType", @"firstSeenDateTime", @"hashes", @"lastSeenDateTime", @"malwareStates",
        //                        @"names", @"riskScore", @"size", @"tags", @"vendorInformation", @"vulnerabilityStates");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get hostSecurityProfiles from security</summary>
        //    /// <param name="hostSecurityProfileId">key: id of hostSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetHostSecurityProfiles(string hostSecurityProfileId,
        //        string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphHostSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/hostSecurityProfiles/"
        //                + Uri.EscapeDataString(hostSecurityProfileId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetHostSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get hostSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetHostSecurityProfilesViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphHostSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/hostSecurityProfiles/(?<hostSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/hostSecurityProfiles/{hostSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var hostSecurityProfileId = _match.Groups["hostSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/hostSecurityProfiles/"
        //                + hostSecurityProfileId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetHostSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetHostSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetHostSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphHostSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphHostSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetHostSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="hostSecurityProfileId">key: id of hostSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetHostSecurityProfiles_Validate(
        //        string hostSecurityProfileId, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(hostSecurityProfileId), hostSecurityProfileId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"azureSubscriptionId",
        //                        @"azureTenantId", @"firstSeenDateTime", @"fqdn", @"isAzureAdJoined", @"isAzureAdRegistered",
        //                        @"isHybridAzureDomainJoined", @"lastSeenDateTime", @"logonUsers", @"netBiosName",
        //                        @"networkInterfaces", @"os", @"osVersion", @"parentHost", @"relatedHostIds", @"riskScore",
        //                        @"tags", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get ipSecurityProfiles from security</summary>
        //    /// <param name="ipSecurityProfileId">key: id of ipSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetIPSecurityProfiles(string ipSecurityProfileId,
        //        string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphIPSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/ipSecurityProfiles/"
        //                + Uri.EscapeDataString(ipSecurityProfileId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetIPSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get ipSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetIPSecurityProfilesViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphIPSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/ipSecurityProfiles/(?<ipSecurityProfileid>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/ipSecurityProfiles/{ipSecurityProfileid}'");

        //            // replace URI parameters with values from identity
        //            var ipSecurityProfileId = _match.Groups["ipSecurityProfileid"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/ipSecurityProfiles/"
        //                + ipSecurityProfileId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetIPSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetIPSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetIPSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphIPSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphIPSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetIPSecurityProfiles" /> method. Call this like the actual call, but you
        //    ///     will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="ipSecurityProfileId">key: id of ipSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetIPSecurityProfiles_Validate(
        //        string ipSecurityProfileId, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(ipSecurityProfileId), ipSecurityProfileId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activityGroupNames",
        //                        @"address", @"azureSubscriptionId", @"azureTenantId", @"countHits", @"countHosts",
        //                        @"firstSeenDateTime", @"ipCategories", @"ipReferenceData", @"lastSeenDateTime",
        //                        @"riskScore", @"tags", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get providerTenantSettings from security</summary>
        //    /// <param name="providerTenantSettingId">key: id of providerTenantSetting</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetProviderTenantSettings(
        //        string providerTenantSettingId, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphProviderTenantSetting>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/providerTenantSettings/"
        //                + Uri.EscapeDataString(providerTenantSettingId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetProviderTenantSettings_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get providerTenantSettings from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetProviderTenantSettingsViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphProviderTenantSetting>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/providerTenantSettings/(?<providerTenantSetting-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/providerTenantSettings/{providerTenantSetting-id}'");

        //            // replace URI parameters with values from identity
        //            var providerTenantSettingId = _match.Groups["providerTenantSetting-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/providerTenantSettings/"
        //                + providerTenantSettingId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetProviderTenantSettings_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetProviderTenantSettings" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetProviderTenantSettings_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphProviderTenantSetting>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphProviderTenantSetting.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetProviderTenantSettings" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="providerTenantSettingId">key: id of providerTenantSetting</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetProviderTenantSettings_Validate(
        //        string providerTenantSettingId, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(providerTenantSettingId), providerTenantSettingId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"azureTenantId",
        //                        @"enabled", @"lastModifiedDateTime", @"provider", @"vendor");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get secureScoreControlProfiles from security</summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecureScoreControlProfiles(
        //        string secureScoreControlProfileId, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecureScoreControlProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScoreControlProfiles/"
        //                + Uri.EscapeDataString(secureScoreControlProfileId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecureScoreControlProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get secureScoreControlProfiles from security</summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecureScoreControlProfiles1(
        //        string secureScoreControlProfileId, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecureScoreControlProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScoreControlProfiles/"
        //                + Uri.EscapeDataString(secureScoreControlProfileId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecureScoreControlProfiles1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get secureScoreControlProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecureScoreControlProfiles1ViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecureScoreControlProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                        "^/security/secureScoreControlProfiles/(?<secureScoreControlProfile-id>[^/]+)$")
        //                    .Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScoreControlProfiles/{secureScoreControlProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreControlProfileId = _match.Groups["secureScoreControlProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScoreControlProfiles/"
        //                + secureScoreControlProfileId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecureScoreControlProfiles1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityGetSecureScoreControlProfiles1" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecureScoreControlProfiles1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecureScoreControlProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphSecureScoreControlProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetSecureScoreControlProfiles1" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecureScoreControlProfiles1_Validate(
        //        string secureScoreControlProfileId, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreControlProfileId), secureScoreControlProfileId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"actionType",
        //                        @"actionUrl", @"azureTenantId", @"complianceInformation", @"controlCategory",
        //                        @"controlStateUpdates", @"deprecated", @"implementationCost", @"lastModifiedDateTime",
        //                        @"maxScore", @"rank", @"remediation", @"remediationImpact", @"service", @"threats", @"tier",
        //                        @"title", @"userImpact", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get secureScoreControlProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecureScoreControlProfilesViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecureScoreControlProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                        "^/security/secureScoreControlProfiles/(?<secureScoreControlProfile-id>[^/]+)$")
        //                    .Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScoreControlProfiles/{secureScoreControlProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreControlProfileId = _match.Groups["secureScoreControlProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScoreControlProfiles/"
        //                + secureScoreControlProfileId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecureScoreControlProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityGetSecureScoreControlProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecureScoreControlProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecureScoreControlProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphSecureScoreControlProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetSecureScoreControlProfiles" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecureScoreControlProfiles_Validate(
        //        string secureScoreControlProfileId, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreControlProfileId), secureScoreControlProfileId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"actionType",
        //                        @"actionUrl", @"azureTenantId", @"complianceInformation", @"controlCategory",
        //                        @"controlStateUpdates", @"deprecated", @"implementationCost", @"lastModifiedDateTime",
        //                        @"maxScore", @"rank", @"remediation", @"remediationImpact", @"service", @"threats", @"tier",
        //                        @"title", @"userImpact", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get secureScores from security</summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecureScores(string secureScoreId, string[] Select,
        //        string[] Expand,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecureScore>, Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScores/"
        //                + Uri.EscapeDataString(secureScoreId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecureScores_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get secureScores from security</summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecureScores1(string secureScoreId, string[] Select,
        //        string[] Expand,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecureScore>, Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScores/"
        //                + Uri.EscapeDataString(secureScoreId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecureScores1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get secureScores from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecureScores1ViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecureScore>, Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/secureScores/(?<secureScore-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScores/{secureScore-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreId = _match.Groups["secureScore-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScores/"
        //                + secureScoreId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecureScores1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetSecureScores1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecureScores1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecureScore>, Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphSecureScore.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetSecureScores1" /> method. Call this like the actual call, but you will
        //    ///     get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecureScores1_Validate(string secureScoreId,
        //        string[] Select, string[] Expand, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreId), secureScoreId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activeUserCount",
        //                        @"averageComparativeScores", @"azureTenantId", @"controlScores", @"createdDateTime",
        //                        @"currentScore", @"enabledServices", @"licensedUserCount", @"maxScore",
        //                        @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get secureScores from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecureScoresViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecureScore>, Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/secureScores/(?<secureScore-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScores/{secureScore-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreId = _match.Groups["secureScore-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScores/"
        //                + secureScoreId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecureScores_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetSecureScores" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecureScores_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecureScore>, Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphSecureScore.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetSecureScores" /> method. Call this like the actual call, but you will
        //    ///     get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecureScores_Validate(string secureScoreId,
        //        string[] Select, string[] Expand, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreId), secureScoreId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activeUserCount",
        //                        @"averageComparativeScores", @"azureTenantId", @"controlScores", @"createdDateTime",
        //                        @"currentScore", @"enabledServices", @"licensedUserCount", @"maxScore",
        //                        @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get security</summary>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecurity(string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecurity>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security"
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecurity_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get security</summary>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecurity1(string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecurity1>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security"
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecurity1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecurity1ViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecurity1>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security$").Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security"
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecurity1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetSecurity1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecurity1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecurity1>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphSecurity1.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetSecurity1" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecurity1_Validate(string[] Select,
        //        string[] Expand, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"providerStatus",
        //                        @"alerts", @"cloudAppSecurityProfiles", @"domainSecurityProfiles", @"fileSecurityProfiles",
        //                        @"hostSecurityProfiles", @"ipSecurityProfiles", @"providerTenantSettings",
        //                        @"secureScoreControlProfiles", @"secureScores", @"securityActions", @"tiIndicators",
        //                        @"userSecurityProfiles");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*", @"alerts",
        //                        @"cloudAppSecurityProfiles", @"domainSecurityProfiles", @"fileSecurityProfiles",
        //                        @"hostSecurityProfiles", @"ipSecurityProfiles", @"providerTenantSettings",
        //                        @"secureScoreControlProfiles", @"secureScores", @"securityActions", @"tiIndicators",
        //                        @"userSecurityProfiles");
        //        }
        //    }

        //    /// <summary>Get securityActions from security</summary>
        //    /// <param name="securityActionId">key: id of securityAction</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecurityActions(string securityActionId,
        //        string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecurityAction>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/securityActions/"
        //                + Uri.EscapeDataString(securityActionId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecurityActions_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get securityActions from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecurityActionsViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecurityAction>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/securityActions/(?<securityAction-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/securityActions/{securityAction-id}'");

        //            // replace URI parameters with values from identity
        //            var securityActionId = _match.Groups["securityAction-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/securityActions/"
        //                + securityActionId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecurityActions_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetSecurityActions" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecurityActions_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphSecurityAction>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetSecurityActions" /> method. Call this like the actual call, but you
        //    ///     will get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="securityActionId">key: id of securityAction</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecurityActions_Validate(string securityActionId,
        //        string[] Select, string[] Expand, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(securityActionId), securityActionId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"actionReason", @"appId",
        //                        @"azureTenantId", @"clientContext", @"completedDateTime", @"createdDateTime", @"errorInfo",
        //                        @"lastActionDateTime", @"name", @"parameters", @"states", @"status", @"user",
        //                        @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetSecurityViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecurity>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security$").Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security"
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetSecurity_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetSecurity" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecurity_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphSecurity>, Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphSecurity.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetSecurity" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetSecurity_Validate(string[] Select,
        //        string[] Expand, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"providerStatus",
        //                        @"alerts", @"cloudAppSecurityProfiles", @"domainSecurityProfiles", @"fileSecurityProfiles",
        //                        @"hostSecurityProfiles", @"ipSecurityProfiles", @"providerTenantSettings",
        //                        @"secureScoreControlProfiles", @"secureScores", @"securityActions", @"tiIndicators",
        //                        @"userSecurityProfiles");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*", @"alerts",
        //                        @"cloudAppSecurityProfiles", @"domainSecurityProfiles", @"fileSecurityProfiles",
        //                        @"hostSecurityProfiles", @"ipSecurityProfiles", @"providerTenantSettings",
        //                        @"secureScoreControlProfiles", @"secureScores", @"securityActions", @"tiIndicators",
        //                        @"userSecurityProfiles");
        //        }
        //    }

        //    /// <summary>Get tiIndicators from security</summary>
        //    /// <param name="tiIndicatorId">key: id of tiIndicator</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetTiIndicators(string tiIndicatorId, string[] Select,
        //        string[] Expand,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphTiIndicator>, Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators/"
        //                + Uri.EscapeDataString(tiIndicatorId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetTiIndicators_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get tiIndicators from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetTiIndicatorsViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphTiIndicator>, Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/tiIndicators/(?<tiIndicator-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/tiIndicators/{tiIndicator-id}'");

        //            // replace URI parameters with values from identity
        //            var tiIndicatorId = _match.Groups["tiIndicator-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators/"
        //                + tiIndicatorId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetTiIndicators_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetTiIndicators" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetTiIndicators_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphTiIndicator>, Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphTiIndicator.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetTiIndicators" /> method. Call this like the actual call, but you will
        //    ///     get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="tiIndicatorId">key: id of tiIndicator</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetTiIndicators_Validate(string tiIndicatorId,
        //        string[] Select, string[] Expand, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(tiIndicatorId), tiIndicatorId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"action",
        //                        @"activityGroupNames", @"additionalInformation", @"azureTenantId", @"confidence",
        //                        @"description", @"diamondModel", @"domainName", @"emailEncoding", @"emailLanguage",
        //                        @"emailRecipient", @"emailSenderAddress", @"emailSenderName", @"emailSourceDomain",
        //                        @"emailSourceIpAddress", @"emailSubject", @"emailXMailer", @"expirationDateTime",
        //                        @"externalId", @"fileCompileDateTime", @"fileCreatedDateTime", @"fileHashType",
        //                        @"fileHashValue", @"fileMutexName", @"fileName", @"filePacker", @"filePath", @"fileSize",
        //                        @"fileType", @"ingestedDateTime", @"isActive", @"killChain", @"knownFalsePositives",
        //                        @"lastReportedDateTime", @"malwareFamilyNames", @"networkCidrBlock",
        //                        @"networkDestinationAsn", @"networkDestinationCidrBlock", @"networkDestinationIPv4",
        //                        @"networkDestinationIPv6", @"networkDestinationPort", @"networkIPv4", @"networkIPv6",
        //                        @"networkPort", @"networkProtocol", @"networkSourceAsn", @"networkSourceCidrBlock",
        //                        @"networkSourceIPv4", @"networkSourceIPv6", @"networkSourcePort", @"passiveOnly",
        //                        @"severity", @"tags", @"targetProduct", @"threatType", @"tlpLevel", @"url", @"userAgent");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get userSecurityProfiles from security</summary>
        //    /// <param name="userSecurityProfileId">key: id of userSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetUserSecurityProfiles(string userSecurityProfileId,
        //        string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphUserSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/userSecurityProfiles/"
        //                + Uri.EscapeDataString(userSecurityProfileId)
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetUserSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get userSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityGetUserSecurityProfilesViaIdentity(
        //        string viaIdentity, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphUserSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/userSecurityProfiles/(?<userSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/userSecurityProfiles/{userSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var userSecurityProfileId = _match.Groups["userSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/userSecurityProfiles/"
        //                + userSecurityProfileId
        //                + "?"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityGetUserSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityGetUserSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetUserSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<MicrosoftGraphUserSecurityProfile>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                MicrosoftGraphUserSecurityProfile.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityGetUserSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="userSecurityProfileId">key: id of userSecurityProfile</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityGetUserSecurityProfiles_Validate(
        //        string userSecurityProfileId, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(userSecurityProfileId), userSecurityProfileId);
        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"accounts",
        //                        @"azureSubscriptionId", @"azureTenantId", @"createdDateTime", @"displayName",
        //                        @"lastModifiedDateTime", @"riskScore", @"tags", @"userPrincipalName", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListAlerts(int? Top, int? Skip, string Search,
        //        string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphAlert>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/alerts"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListAlerts_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListAlerts1(int? Top, int? Skip, string Search,
        //        string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphAlert>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/alerts"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListAlerts1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListAlerts1ViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphAlert>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/alerts$").Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/alerts'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/alerts"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListAlerts1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListAlerts1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListAlerts1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphAlert>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models.ODataCollection<MicrosoftGraphAlert>.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListAlerts1" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListAlerts1_Validate(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"activityGroupName", @"activityGroupName desc", @"alertDetections",
        //                        @"alertDetections desc", @"assignedTo", @"assignedTo desc", @"azureSubscriptionId",
        //                        @"azureSubscriptionId desc", @"azureTenantId", @"azureTenantId desc", @"category",
        //                        @"category desc", @"closedDateTime", @"closedDateTime desc", @"cloudAppStates",
        //                        @"cloudAppStates desc", @"comments", @"comments desc", @"confidence", @"confidence desc",
        //                        @"createdDateTime", @"createdDateTime desc", @"description", @"description desc",
        //                        @"detectionIds", @"detectionIds desc", @"eventDateTime", @"eventDateTime desc", @"feedback",
        //                        @"feedback desc", @"fileStates", @"fileStates desc", @"historyStates",
        //                        @"historyStates desc", @"hostStates", @"hostStates desc", @"incidentIds",
        //                        @"incidentIds desc", @"investigationSecurityStates", @"investigationSecurityStates desc",
        //                        @"lastEventDateTime", @"lastEventDateTime desc", @"lastModifiedDateTime",
        //                        @"lastModifiedDateTime desc", @"malwareStates", @"malwareStates desc",
        //                        @"messageSecurityStates", @"messageSecurityStates desc", @"networkConnections",
        //                        @"networkConnections desc", @"processes", @"processes desc", @"recommendedActions",
        //                        @"recommendedActions desc", @"registryKeyStates", @"registryKeyStates desc",
        //                        @"securityResources", @"securityResources desc", @"severity", @"severity desc",
        //                        @"sourceMaterials", @"sourceMaterials desc", @"status", @"status desc", @"tags",
        //                        @"tags desc", @"title", @"title desc", @"triggers", @"triggers desc",
        //                        @"uriClickSecurityStates", @"uriClickSecurityStates desc", @"userStates",
        //                        @"userStates desc", @"vendorInformation", @"vendorInformation desc", @"vulnerabilityStates",
        //                        @"vulnerabilityStates desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activityGroupName",
        //                        @"alertDetections", @"assignedTo", @"azureSubscriptionId", @"azureTenantId", @"category",
        //                        @"closedDateTime", @"cloudAppStates", @"comments", @"confidence", @"createdDateTime",
        //                        @"description", @"detectionIds", @"eventDateTime", @"feedback", @"fileStates",
        //                        @"historyStates", @"hostStates", @"incidentIds", @"investigationSecurityStates",
        //                        @"lastEventDateTime", @"lastModifiedDateTime", @"malwareStates", @"messageSecurityStates",
        //                        @"networkConnections", @"processes", @"recommendedActions", @"registryKeyStates",
        //                        @"securityResources", @"severity", @"sourceMaterials", @"status", @"tags", @"title",
        //                        @"triggers", @"uriClickSecurityStates", @"userStates", @"vendorInformation",
        //                        @"vulnerabilityStates");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListAlertsViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphAlert>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/alerts$").Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/alerts'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/alerts"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListAlerts_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListAlerts" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListAlerts_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphAlert>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models.ODataCollection<MicrosoftGraphAlert>.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListAlerts" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListAlerts_Validate(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"activityGroupName", @"activityGroupName desc", @"alertDetections",
        //                        @"alertDetections desc", @"assignedTo", @"assignedTo desc", @"azureSubscriptionId",
        //                        @"azureSubscriptionId desc", @"azureTenantId", @"azureTenantId desc", @"category",
        //                        @"category desc", @"closedDateTime", @"closedDateTime desc", @"cloudAppStates",
        //                        @"cloudAppStates desc", @"comments", @"comments desc", @"confidence", @"confidence desc",
        //                        @"createdDateTime", @"createdDateTime desc", @"description", @"description desc",
        //                        @"detectionIds", @"detectionIds desc", @"eventDateTime", @"eventDateTime desc", @"feedback",
        //                        @"feedback desc", @"fileStates", @"fileStates desc", @"historyStates",
        //                        @"historyStates desc", @"hostStates", @"hostStates desc", @"incidentIds",
        //                        @"incidentIds desc", @"investigationSecurityStates", @"investigationSecurityStates desc",
        //                        @"lastEventDateTime", @"lastEventDateTime desc", @"lastModifiedDateTime",
        //                        @"lastModifiedDateTime desc", @"malwareStates", @"malwareStates desc",
        //                        @"messageSecurityStates", @"messageSecurityStates desc", @"networkConnections",
        //                        @"networkConnections desc", @"processes", @"processes desc", @"recommendedActions",
        //                        @"recommendedActions desc", @"registryKeyStates", @"registryKeyStates desc",
        //                        @"securityResources", @"securityResources desc", @"severity", @"severity desc",
        //                        @"sourceMaterials", @"sourceMaterials desc", @"status", @"status desc", @"tags",
        //                        @"tags desc", @"title", @"title desc", @"triggers", @"triggers desc",
        //                        @"uriClickSecurityStates", @"uriClickSecurityStates desc", @"userStates",
        //                        @"userStates desc", @"vendorInformation", @"vendorInformation desc", @"vulnerabilityStates",
        //                        @"vulnerabilityStates desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activityGroupName",
        //                        @"alertDetections", @"assignedTo", @"azureSubscriptionId", @"azureTenantId", @"category",
        //                        @"closedDateTime", @"cloudAppStates", @"comments", @"confidence", @"createdDateTime",
        //                        @"description", @"detectionIds", @"eventDateTime", @"feedback", @"fileStates",
        //                        @"historyStates", @"hostStates", @"incidentIds", @"investigationSecurityStates",
        //                        @"lastEventDateTime", @"lastModifiedDateTime", @"malwareStates", @"messageSecurityStates",
        //                        @"networkConnections", @"processes", @"recommendedActions", @"registryKeyStates",
        //                        @"securityResources", @"severity", @"sourceMaterials", @"status", @"tags", @"title",
        //                        @"triggers", @"uriClickSecurityStates", @"userStates", @"vendorInformation",
        //                        @"vulnerabilityStates");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get cloudAppSecurityProfiles from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListCloudAppSecurityProfiles(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphCloudAppSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/cloudAppSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListCloudAppSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get cloudAppSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListCloudAppSecurityProfilesViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphCloudAppSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/cloudAppSecurityProfiles$")
        //                .Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception("Invalid identity for URI '/security/cloudAppSecurityProfiles'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/cloudAppSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListCloudAppSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityListCloudAppSecurityProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListCloudAppSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphCloudAppSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models
        //                                    .ODataCollection<MicrosoftGraphCloudAppSecurityProfile>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListCloudAppSecurityProfiles" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListCloudAppSecurityProfiles_Validate(int? Top,
        //        int? Skip, string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"azureSubscriptionId", @"azureSubscriptionId desc", @"azureTenantId",
        //                        @"azureTenantId desc", @"createdDateTime", @"createdDateTime desc", @"deploymentPackageUrl",
        //                        @"deploymentPackageUrl desc", @"destinationServiceName", @"destinationServiceName desc",
        //                        @"isSigned", @"isSigned desc", @"lastModifiedDateTime", @"lastModifiedDateTime desc",
        //                        @"manifest", @"manifest desc", @"name", @"name desc", @"permissionsRequired",
        //                        @"permissionsRequired desc", @"platform", @"platform desc", @"policyName",
        //                        @"policyName desc", @"publisher", @"publisher desc", @"riskScore", @"riskScore desc",
        //                        @"tags", @"tags desc", @"type", @"type desc", @"vendorInformation",
        //                        @"vendorInformation desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"azureSubscriptionId",
        //                        @"azureTenantId", @"createdDateTime", @"deploymentPackageUrl", @"destinationServiceName",
        //                        @"isSigned", @"lastModifiedDateTime", @"manifest", @"name", @"permissionsRequired",
        //                        @"platform", @"policyName", @"publisher", @"riskScore", @"tags", @"type",
        //                        @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get domainSecurityProfiles from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListDomainSecurityProfiles(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphDomainSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/domainSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListDomainSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get domainSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListDomainSecurityProfilesViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphDomainSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/domainSecurityProfiles$")
        //                .Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/domainSecurityProfiles'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/domainSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListDomainSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListDomainSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListDomainSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphDomainSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models
        //                                    .ODataCollection<MicrosoftGraphDomainSecurityProfile>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListDomainSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListDomainSecurityProfiles_Validate(int? Top,
        //        int? Skip, string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"activityGroupNames", @"activityGroupNames desc", @"azureSubscriptionId",
        //                        @"azureSubscriptionId desc", @"azureTenantId", @"azureTenantId desc", @"countHits",
        //                        @"countHits desc", @"countInOrg", @"countInOrg desc", @"domainCategories",
        //                        @"domainCategories desc", @"domainRegisteredDateTime", @"domainRegisteredDateTime desc",
        //                        @"firstSeenDateTime", @"firstSeenDateTime desc", @"lastSeenDateTime",
        //                        @"lastSeenDateTime desc", @"name", @"name desc", @"registrant", @"registrant desc",
        //                        @"riskScore", @"riskScore desc", @"tags", @"tags desc", @"vendorInformation",
        //                        @"vendorInformation desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activityGroupNames",
        //                        @"azureSubscriptionId", @"azureTenantId", @"countHits", @"countInOrg", @"domainCategories",
        //                        @"domainRegisteredDateTime", @"firstSeenDateTime", @"lastSeenDateTime", @"name",
        //                        @"registrant", @"riskScore", @"tags", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get fileSecurityProfiles from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListFileSecurityProfiles(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphFileSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/fileSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListFileSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get fileSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListFileSecurityProfilesViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphFileSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex("^/security/fileSecurityProfiles$").Match(
        //                    viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/fileSecurityProfiles'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/fileSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListFileSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListFileSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListFileSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphFileSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models.ODataCollection<MicrosoftGraphFileSecurityProfile>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListFileSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListFileSecurityProfiles_Validate(int? Top,
        //        int? Skip, string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"activityGroupNames", @"activityGroupNames desc", @"azureSubscriptionId",
        //                        @"azureSubscriptionId desc", @"azureTenantId", @"azureTenantId desc",
        //                        @"certificateThumbprint", @"certificateThumbprint desc", @"extensions", @"extensions desc",
        //                        @"fileType", @"fileType desc", @"firstSeenDateTime", @"firstSeenDateTime desc", @"hashes",
        //                        @"hashes desc", @"lastSeenDateTime", @"lastSeenDateTime desc", @"malwareStates",
        //                        @"malwareStates desc", @"names", @"names desc", @"riskScore", @"riskScore desc", @"size",
        //                        @"size desc", @"tags", @"tags desc", @"vendorInformation", @"vendorInformation desc",
        //                        @"vulnerabilityStates", @"vulnerabilityStates desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activityGroupNames",
        //                        @"azureSubscriptionId", @"azureTenantId", @"certificateThumbprint", @"extensions",
        //                        @"fileType", @"firstSeenDateTime", @"hashes", @"lastSeenDateTime", @"malwareStates",
        //                        @"names", @"riskScore", @"size", @"tags", @"vendorInformation", @"vulnerabilityStates");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get hostSecurityProfiles from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListHostSecurityProfiles(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphHostSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/hostSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListHostSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get hostSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListHostSecurityProfilesViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphHostSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex("^/security/hostSecurityProfiles$").Match(
        //                    viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/hostSecurityProfiles'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/hostSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListHostSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListHostSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListHostSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphHostSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models.ODataCollection<MicrosoftGraphHostSecurityProfile>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListHostSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListHostSecurityProfiles_Validate(int? Top,
        //        int? Skip, string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"azureSubscriptionId", @"azureSubscriptionId desc", @"azureTenantId",
        //                        @"azureTenantId desc", @"firstSeenDateTime", @"firstSeenDateTime desc", @"fqdn",
        //                        @"fqdn desc", @"isAzureAdJoined", @"isAzureAdJoined desc", @"isAzureAdRegistered",
        //                        @"isAzureAdRegistered desc", @"isHybridAzureDomainJoined",
        //                        @"isHybridAzureDomainJoined desc", @"lastSeenDateTime", @"lastSeenDateTime desc",
        //                        @"logonUsers", @"logonUsers desc", @"netBiosName", @"netBiosName desc",
        //                        @"networkInterfaces", @"networkInterfaces desc", @"os", @"os desc", @"osVersion",
        //                        @"osVersion desc", @"parentHost", @"parentHost desc", @"relatedHostIds",
        //                        @"relatedHostIds desc", @"riskScore", @"riskScore desc", @"tags", @"tags desc",
        //                        @"vendorInformation", @"vendorInformation desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"azureSubscriptionId",
        //                        @"azureTenantId", @"firstSeenDateTime", @"fqdn", @"isAzureAdJoined", @"isAzureAdRegistered",
        //                        @"isHybridAzureDomainJoined", @"lastSeenDateTime", @"logonUsers", @"netBiosName",
        //                        @"networkInterfaces", @"os", @"osVersion", @"parentHost", @"relatedHostIds", @"riskScore",
        //                        @"tags", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get ipSecurityProfiles from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListIPSecurityProfiles(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphIPSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/ipSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListIPSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get ipSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListIPSecurityProfilesViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphIPSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex("^/security/ipSecurityProfiles$").Match(
        //                    viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/ipSecurityProfiles'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/ipSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListIPSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListIPSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListIPSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphIPSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models.ODataCollection<MicrosoftGraphIPSecurityProfile>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListIPSecurityProfiles" /> method. Call this like the actual call, but you
        //    ///     will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListIPSecurityProfiles_Validate(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"activityGroupNames", @"activityGroupNames desc", @"address", @"address desc",
        //                        @"azureSubscriptionId", @"azureSubscriptionId desc", @"azureTenantId",
        //                        @"azureTenantId desc", @"countHits", @"countHits desc", @"countHosts", @"countHosts desc",
        //                        @"firstSeenDateTime", @"firstSeenDateTime desc", @"ipCategories", @"ipCategories desc",
        //                        @"ipReferenceData", @"ipReferenceData desc", @"lastSeenDateTime", @"lastSeenDateTime desc",
        //                        @"riskScore", @"riskScore desc", @"tags", @"tags desc", @"vendorInformation",
        //                        @"vendorInformation desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activityGroupNames",
        //                        @"address", @"azureSubscriptionId", @"azureTenantId", @"countHits", @"countHosts",
        //                        @"firstSeenDateTime", @"ipCategories", @"ipReferenceData", @"lastSeenDateTime",
        //                        @"riskScore", @"tags", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get providerTenantSettings from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListProviderTenantSettings(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphProviderTenantSetting>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/providerTenantSettings"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListProviderTenantSettings_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get providerTenantSettings from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListProviderTenantSettingsViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphProviderTenantSetting>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/providerTenantSettings$")
        //                .Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/providerTenantSettings'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/providerTenantSettings"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListProviderTenantSettings_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListProviderTenantSettings" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListProviderTenantSettings_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphProviderTenantSetting>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models
        //                                    .ODataCollection<MicrosoftGraphProviderTenantSetting>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListProviderTenantSettings" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListProviderTenantSettings_Validate(int? Top,
        //        int? Skip, string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"azureTenantId", @"azureTenantId desc", @"enabled", @"enabled desc",
        //                        @"lastModifiedDateTime", @"lastModifiedDateTime desc", @"provider", @"provider desc",
        //                        @"vendor", @"vendor desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"azureTenantId",
        //                        @"enabled", @"lastModifiedDateTime", @"provider", @"vendor");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get secureScoreControlProfiles from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListSecureScoreControlProfiles(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScoreControlProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScoreControlProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListSecureScoreControlProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get secureScoreControlProfiles from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListSecureScoreControlProfiles1(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScoreControlProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScoreControlProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListSecureScoreControlProfiles1_Call(request, onOk, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Get secureScoreControlProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListSecureScoreControlProfiles1ViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScoreControlProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/secureScoreControlProfiles$")
        //                .Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScoreControlProfiles'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScoreControlProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListSecureScoreControlProfiles1_Call(request, onOk, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityListSecureScoreControlProfiles1" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListSecureScoreControlProfiles1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScoreControlProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models
        //                                    .ODataCollection<MicrosoftGraphSecureScoreControlProfile>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListSecureScoreControlProfiles1" /> method. Call this like the actual
        //    ///     call, but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListSecureScoreControlProfiles1_Validate(int? Top,
        //        int? Skip, string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"actionType", @"actionType desc", @"actionUrl", @"actionUrl desc", @"azureTenantId",
        //                        @"azureTenantId desc", @"complianceInformation", @"complianceInformation desc",
        //                        @"controlCategory", @"controlCategory desc", @"controlStateUpdates",
        //                        @"controlStateUpdates desc", @"deprecated", @"deprecated desc", @"implementationCost",
        //                        @"implementationCost desc", @"lastModifiedDateTime", @"lastModifiedDateTime desc",
        //                        @"maxScore", @"maxScore desc", @"rank", @"rank desc", @"remediation", @"remediation desc",
        //                        @"remediationImpact", @"remediationImpact desc", @"service", @"service desc", @"threats",
        //                        @"threats desc", @"tier", @"tier desc", @"title", @"title desc", @"userImpact",
        //                        @"userImpact desc", @"vendorInformation", @"vendorInformation desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"actionType",
        //                        @"actionUrl", @"azureTenantId", @"complianceInformation", @"controlCategory",
        //                        @"controlStateUpdates", @"deprecated", @"implementationCost", @"lastModifiedDateTime",
        //                        @"maxScore", @"rank", @"remediation", @"remediationImpact", @"service", @"threats", @"tier",
        //                        @"title", @"userImpact", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get secureScoreControlProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListSecureScoreControlProfilesViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScoreControlProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/secureScoreControlProfiles$")
        //                .Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScoreControlProfiles'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScoreControlProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListSecureScoreControlProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityListSecureScoreControlProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListSecureScoreControlProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScoreControlProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models
        //                                    .ODataCollection<MicrosoftGraphSecureScoreControlProfile>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListSecureScoreControlProfiles" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListSecureScoreControlProfiles_Validate(int? Top,
        //        int? Skip, string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"actionType", @"actionType desc", @"actionUrl", @"actionUrl desc", @"azureTenantId",
        //                        @"azureTenantId desc", @"complianceInformation", @"complianceInformation desc",
        //                        @"controlCategory", @"controlCategory desc", @"controlStateUpdates",
        //                        @"controlStateUpdates desc", @"deprecated", @"deprecated desc", @"implementationCost",
        //                        @"implementationCost desc", @"lastModifiedDateTime", @"lastModifiedDateTime desc",
        //                        @"maxScore", @"maxScore desc", @"rank", @"rank desc", @"remediation", @"remediation desc",
        //                        @"remediationImpact", @"remediationImpact desc", @"service", @"service desc", @"threats",
        //                        @"threats desc", @"tier", @"tier desc", @"title", @"title desc", @"userImpact",
        //                        @"userImpact desc", @"vendorInformation", @"vendorInformation desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"actionType",
        //                        @"actionUrl", @"azureTenantId", @"complianceInformation", @"controlCategory",
        //                        @"controlStateUpdates", @"deprecated", @"implementationCost", @"lastModifiedDateTime",
        //                        @"maxScore", @"rank", @"remediation", @"remediationImpact", @"service", @"threats", @"tier",
        //                        @"title", @"userImpact", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get secureScores from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListSecureScores(int? Top, int? Skip, string Search,
        //        string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScore>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScores"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListSecureScores_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get secureScores from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListSecureScores1(int? Top, int? Skip, string Search,
        //        string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScore>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScores"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListSecureScores1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get secureScores from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListSecureScores1ViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScore>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex("^/security/secureScores$").Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/secureScores'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScores"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListSecureScores1_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListSecureScores1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListSecureScores1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScore>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models.ODataCollection<MicrosoftGraphSecureScore>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListSecureScores1" /> method. Call this like the actual call, but you will
        //    ///     get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListSecureScores1_Validate(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"activeUserCount", @"activeUserCount desc", @"averageComparativeScores",
        //                        @"averageComparativeScores desc", @"azureTenantId", @"azureTenantId desc", @"controlScores",
        //                        @"controlScores desc", @"createdDateTime", @"createdDateTime desc", @"currentScore",
        //                        @"currentScore desc", @"enabledServices", @"enabledServices desc", @"licensedUserCount",
        //                        @"licensedUserCount desc", @"maxScore", @"maxScore desc", @"vendorInformation",
        //                        @"vendorInformation desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activeUserCount",
        //                        @"averageComparativeScores", @"azureTenantId", @"controlScores", @"createdDateTime",
        //                        @"currentScore", @"enabledServices", @"licensedUserCount", @"maxScore",
        //                        @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get secureScores from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListSecureScoresViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScore>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex("^/security/secureScores$").Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/secureScores'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScores"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListSecureScores_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListSecureScores" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListSecureScores_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphSecureScore>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models.ODataCollection<MicrosoftGraphSecureScore>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListSecureScores" /> method. Call this like the actual call, but you will
        //    ///     get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListSecureScores_Validate(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"activeUserCount", @"activeUserCount desc", @"averageComparativeScores",
        //                        @"averageComparativeScores desc", @"azureTenantId", @"azureTenantId desc", @"controlScores",
        //                        @"controlScores desc", @"createdDateTime", @"createdDateTime desc", @"currentScore",
        //                        @"currentScore desc", @"enabledServices", @"enabledServices desc", @"licensedUserCount",
        //                        @"licensedUserCount desc", @"maxScore", @"maxScore desc", @"vendorInformation",
        //                        @"vendorInformation desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"activeUserCount",
        //                        @"averageComparativeScores", @"azureTenantId", @"controlScores", @"createdDateTime",
        //                        @"currentScore", @"enabledServices", @"licensedUserCount", @"maxScore",
        //                        @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }


        //    /// <summary>Get securityActions from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListSecurityActionsViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<IMicrosoftGraphSecurityAction>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex("^/security/securityActions$").Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/securityActions'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/securityActions"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListSecurityActions_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }


        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListSecurityActions" /> method. Call this like the actual call, but you
        //    ///     will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListSecurityActions_Validate(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc",
        //                        @"actionReason", @"actionReason desc", @"appId", @"appId desc", @"azureTenantId",
        //                        @"azureTenantId desc", @"clientContext", @"clientContext desc", @"completedDateTime",
        //                        @"completedDateTime desc", @"createdDateTime", @"createdDateTime desc", @"errorInfo",
        //                        @"errorInfo desc", @"lastActionDateTime", @"lastActionDateTime desc", @"name", @"name desc",
        //                        @"parameters", @"parameters desc", @"states", @"states desc", @"status", @"status desc",
        //                        @"user", @"user desc", @"vendorInformation", @"vendorInformation desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"actionReason", @"appId",
        //                        @"azureTenantId", @"clientContext", @"completedDateTime", @"createdDateTime", @"errorInfo",
        //                        @"lastActionDateTime", @"name", @"parameters", @"states", @"status", @"user",
        //                        @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get tiIndicators from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListTiIndicators(int? Top, int? Skip, string Search,
        //        string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphTiIndicator>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListTiIndicators_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get tiIndicators from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListTiIndicatorsViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphTiIndicator>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex("^/security/tiIndicators$").Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/tiIndicators'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListTiIndicators_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListTiIndicators" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListTiIndicators_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphTiIndicator>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models.ODataCollection<MicrosoftGraphTiIndicator>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListTiIndicators" /> method. Call this like the actual call, but you will
        //    ///     get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListTiIndicators_Validate(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc", @"action",
        //                        @"action desc", @"activityGroupNames", @"activityGroupNames desc", @"additionalInformation",
        //                        @"additionalInformation desc", @"azureTenantId", @"azureTenantId desc", @"confidence",
        //                        @"confidence desc", @"description", @"description desc", @"diamondModel",
        //                        @"diamondModel desc", @"domainName", @"domainName desc", @"emailEncoding",
        //                        @"emailEncoding desc", @"emailLanguage", @"emailLanguage desc", @"emailRecipient",
        //                        @"emailRecipient desc", @"emailSenderAddress", @"emailSenderAddress desc",
        //                        @"emailSenderName", @"emailSenderName desc", @"emailSourceDomain",
        //                        @"emailSourceDomain desc", @"emailSourceIpAddress", @"emailSourceIpAddress desc",
        //                        @"emailSubject", @"emailSubject desc", @"emailXMailer", @"emailXMailer desc",
        //                        @"expirationDateTime", @"expirationDateTime desc", @"externalId", @"externalId desc",
        //                        @"fileCompileDateTime", @"fileCompileDateTime desc", @"fileCreatedDateTime",
        //                        @"fileCreatedDateTime desc", @"fileHashType", @"fileHashType desc", @"fileHashValue",
        //                        @"fileHashValue desc", @"fileMutexName", @"fileMutexName desc", @"fileName",
        //                        @"fileName desc", @"filePacker", @"filePacker desc", @"filePath", @"filePath desc",
        //                        @"fileSize", @"fileSize desc", @"fileType", @"fileType desc", @"ingestedDateTime",
        //                        @"ingestedDateTime desc", @"isActive", @"isActive desc", @"killChain", @"killChain desc",
        //                        @"knownFalsePositives", @"knownFalsePositives desc", @"lastReportedDateTime",
        //                        @"lastReportedDateTime desc", @"malwareFamilyNames", @"malwareFamilyNames desc",
        //                        @"networkCidrBlock", @"networkCidrBlock desc", @"networkDestinationAsn",
        //                        @"networkDestinationAsn desc", @"networkDestinationCidrBlock",
        //                        @"networkDestinationCidrBlock desc", @"networkDestinationIPv4",
        //                        @"networkDestinationIPv4 desc", @"networkDestinationIPv6", @"networkDestinationIPv6 desc",
        //                        @"networkDestinationPort", @"networkDestinationPort desc", @"networkIPv4",
        //                        @"networkIPv4 desc", @"networkIPv6", @"networkIPv6 desc", @"networkPort",
        //                        @"networkPort desc", @"networkProtocol", @"networkProtocol desc", @"networkSourceAsn",
        //                        @"networkSourceAsn desc", @"networkSourceCidrBlock", @"networkSourceCidrBlock desc",
        //                        @"networkSourceIPv4", @"networkSourceIPv4 desc", @"networkSourceIPv6",
        //                        @"networkSourceIPv6 desc", @"networkSourcePort", @"networkSourcePort desc", @"passiveOnly",
        //                        @"passiveOnly desc", @"severity", @"severity desc", @"tags", @"tags desc", @"targetProduct",
        //                        @"targetProduct desc", @"threatType", @"threatType desc", @"tlpLevel", @"tlpLevel desc",
        //                        @"url", @"url desc", @"userAgent", @"userAgent desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"action",
        //                        @"activityGroupNames", @"additionalInformation", @"azureTenantId", @"confidence",
        //                        @"description", @"diamondModel", @"domainName", @"emailEncoding", @"emailLanguage",
        //                        @"emailRecipient", @"emailSenderAddress", @"emailSenderName", @"emailSourceDomain",
        //                        @"emailSourceIpAddress", @"emailSubject", @"emailXMailer", @"expirationDateTime",
        //                        @"externalId", @"fileCompileDateTime", @"fileCreatedDateTime", @"fileHashType",
        //                        @"fileHashValue", @"fileMutexName", @"fileName", @"filePacker", @"filePath", @"fileSize",
        //                        @"fileType", @"ingestedDateTime", @"isActive", @"killChain", @"knownFalsePositives",
        //                        @"lastReportedDateTime", @"malwareFamilyNames", @"networkCidrBlock",
        //                        @"networkDestinationAsn", @"networkDestinationCidrBlock", @"networkDestinationIPv4",
        //                        @"networkDestinationIPv6", @"networkDestinationPort", @"networkIPv4", @"networkIPv6",
        //                        @"networkPort", @"networkProtocol", @"networkSourceAsn", @"networkSourceCidrBlock",
        //                        @"networkSourceIPv4", @"networkSourceIPv6", @"networkSourcePort", @"passiveOnly",
        //                        @"severity", @"tags", @"targetProduct", @"threatType", @"tlpLevel", @"url", @"userAgent");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Get userSecurityProfiles from security</summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListUserSecurityProfiles(int? Top, int? Skip,
        //        string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphUserSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/userSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListUserSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Get userSecurityProfiles from security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityListUserSecurityProfilesViaIdentity(
        //        string viaIdentity, int? Top, int? Skip, string Search, string Filter, bool? Count,
        //        string[] Orderby, string[] Select, string[] Expand,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphUserSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex("^/security/userSecurityProfiles$").Match(
        //                    viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/userSecurityProfiles'");

        //            // replace URI parameters with values from identity
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/userSecurityProfiles"
        //                + "?"
        //                + (null == Top
        //                    ? string.Empty
        //                    : "$top=" + Uri.EscapeDataString(Top.ToString()))
        //                + "&"
        //                + (null == Skip
        //                    ? string.Empty
        //                    : "$skip=" + Uri.EscapeDataString(Skip.ToString()))
        //                + "&"
        //                + (string.IsNullOrEmpty(Search)
        //                    ? string.Empty
        //                    : "$search=" + Uri.EscapeDataString(Search))
        //                + "&"
        //                + (string.IsNullOrEmpty(Filter)
        //                    ? string.Empty
        //                    : "$filter=" + Uri.EscapeDataString(Filter))
        //                + "&"
        //                + (null == Count
        //                    ? string.Empty
        //                    : "$count=" + Uri.EscapeDataString(Count.ToString().ToLower()))
        //                + "&"
        //                + (null != Orderby && Orderby.Length > 0
        //                    ? "Orderby=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Orderby,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Select && Select.Length > 0
        //                    ? "Select=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Select,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                + "&"
        //                + (null != Expand && Expand.Length > 0
        //                    ? "Expand=" + Uri.EscapeDataString(
        //                        Enumerable.Aggregate(Expand,
        //                            (current, each) =>
        //                                current + "," +
        //                                Uri.EscapeDataString(
        //                                    each?.ToString() ?? string.Empty)))
        //                    : string.Empty)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Get, _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityListUserSecurityProfiles_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityListUserSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListUserSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //            Task<ODataCollection<MicrosoftGraphUserSecurityProfile>>,
        //            Task> onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                Models.ODataCollection<MicrosoftGraphUserSecurityProfile>
        //                                    .FromJson(JsonNode
        //                                        .Parse(body.Result))));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityListUserSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="Top">Show only the first n items</param>
        //    /// <param name="Skip">Skip the first n items</param>
        //    /// <param name="Search">Search items by search phrases</param>
        //    /// <param name="Filter">Filter items by property values</param>
        //    /// <param name="Count">Include count of items</param>
        //    /// <param name="Orderby">Order items by property values</param>
        //    /// <param name="Select">Select properties to be returned</param>
        //    /// <param name="Expand">Expand related entities</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityListUserSecurityProfiles_Validate(int? Top,
        //        int? Skip, string Search, string Filter, bool? Count, string[] Orderby, string[] Select, string[] Expand,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(Search), Search);
        //            await eventListener.AssertNotNull(nameof(Filter), Filter);
        //            if (Orderby != null)
        //                for (var __i = 0; __i < Orderby.Length; __i++)
        //                    await eventListener.AssertEnum($"Orderby[{__i}]", Orderby[__i], @"id", @"id desc", @"accounts",
        //                        @"accounts desc", @"azureSubscriptionId", @"azureSubscriptionId desc", @"azureTenantId",
        //                        @"azureTenantId desc", @"createdDateTime", @"createdDateTime desc", @"displayName",
        //                        @"displayName desc", @"lastModifiedDateTime", @"lastModifiedDateTime desc", @"riskScore",
        //                        @"riskScore desc", @"tags", @"tags desc", @"userPrincipalName", @"userPrincipalName desc",
        //                        @"vendorInformation", @"vendorInformation desc");

        //            if (Select != null)
        //                for (var __i = 0; __i < Select.Length; __i++)
        //                    await eventListener.AssertEnum($"Select[{__i}]", Select[__i], @"id", @"accounts",
        //                        @"azureSubscriptionId", @"azureTenantId", @"createdDateTime", @"displayName",
        //                        @"lastModifiedDateTime", @"riskScore", @"tags", @"userPrincipalName", @"vendorInformation");

        //            if (Expand != null)
        //                for (var __i = 0; __i < Expand.Length; __i++)
        //                    await eventListener.AssertEnum($"Expand[{__i}]", Expand[__i], @"*");
        //        }
        //    }

        //    /// <summary>Invoke action deleteTiIndicators</summary>
        //    /// <param name="body">Action parameters</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityTiIndicatorsDeleteTiIndicators(
        //        Paths9Mf33ASecurityTiindicatorsMicrosoftGraphDeletetiindicatorsPostRequestbodyContentApplicationJsonSchema
        //            body,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphResultInfo[]>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators/microsoft.graph.deleteTiIndicators"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityTiIndicatorsDeleteTiIndicators_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Invoke action deleteTiIndicatorsByExternalId</summary>
        //    /// <param name="body">Action parameters</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityTiIndicatorsDeleteTiIndicatorsByExternalId(
        //        Paths1Jddi17SecurityTiindicatorsMicrosoftGraphDeletetiindicatorsbyexternalidPostRequestbodyContentApplicationJsonSchema
        //            body,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphResultInfo[]>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators/microsoft.graph.deleteTiIndicatorsByExternalId"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityTiIndicatorsDeleteTiIndicatorsByExternalId_Call(request, onOk, onDefault,
        //                eventListener, sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityTiIndicatorsDeleteTiIndicatorsByExternalId" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityTiIndicatorsDeleteTiIndicatorsByExternalId_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphResultInfo[]>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                If(
        //                                    JsonArray.Parse(body.Result), out var __y)
        //                                    ? new Func<MicrosoftGraphResultInfo[]>(() =>
        //                                        Enumerable.ToArray(
        //                                            Enumerable.Select(__y,
        //                                                __x => (MicrosoftGraphResultInfo) MicrosoftGraphResultInfo.FromJson(
        //                                                    __x))))()
        //                                    : null));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityTiIndicatorsDeleteTiIndicatorsByExternalId" /> method. Call this like the
        //    ///     actual
        //    ///     call, but you will get validation events back.
        //    /// </summary>
        //    /// <param name="body">Action parameters</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityTiIndicatorsDeleteTiIndicatorsByExternalId_Validate(
        //        Paths1Jddi17SecurityTiindicatorsMicrosoftGraphDeletetiindicatorsbyexternalidPostRequestbodyContentApplicationJsonSchema
        //            body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityTiIndicatorsDeleteTiIndicators" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityTiIndicatorsDeleteTiIndicators_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphResultInfo[]>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                If(
        //                                    JsonArray.Parse(body.Result), out var __y)
        //                                    ? new Func<MicrosoftGraphResultInfo[]>(() =>
        //                                        Enumerable.ToArray(
        //                                            Enumerable.Select(__y,
        //                                                __x => (MicrosoftGraphResultInfo) MicrosoftGraphResultInfo.FromJson(
        //                                                    __x))))()
        //                                    : null));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityTiIndicatorsDeleteTiIndicators" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="body">Action parameters</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityTiIndicatorsDeleteTiIndicators_Validate(
        //        Paths9Mf33ASecurityTiindicatorsMicrosoftGraphDeletetiindicatorsPostRequestbodyContentApplicationJsonSchema
        //            body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Invoke action submitTiIndicators</summary>
        //    /// <param name="body">Action parameters</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityTiIndicatorsSubmitTiIndicators(
        //        Paths18Nbj75SecurityTiindicatorsMicrosoftGraphSubmittiindicatorsPostRequestbodyContentApplicationJsonSchema
        //            body,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphTiIndicator[]>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators/microsoft.graph.submitTiIndicators"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityTiIndicatorsSubmitTiIndicators_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityTiIndicatorsSubmitTiIndicators" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityTiIndicatorsSubmitTiIndicators_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphTiIndicator[]>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                If(
        //                                    JsonArray.Parse(body.Result), out var __y)
        //                                    ? new Func<MicrosoftGraphTiIndicator[]>(() =>
        //                                        Enumerable.ToArray(
        //                                            Enumerable.Select(__y,
        //                                                __x => (MicrosoftGraphTiIndicator) MicrosoftGraphTiIndicator
        //                                                    .FromJson(__x))))()
        //                                    : null));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityTiIndicatorsSubmitTiIndicators" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="body">Action parameters</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityTiIndicatorsSubmitTiIndicators_Validate(
        //        Paths18Nbj75SecurityTiindicatorsMicrosoftGraphSubmittiindicatorsPostRequestbodyContentApplicationJsonSchema
        //            body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Invoke action updateTiIndicators</summary>
        //    /// <param name="body">Action parameters</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityTiIndicatorsUpdateTiIndicators(
        //        Paths3Ccfi6SecurityTiindicatorsMicrosoftGraphUpdatetiindicatorsPostRequestbodyContentApplicationJsonSchema
        //            body,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphTiIndicator[]>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators/microsoft.graph.updateTiIndicators"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Post,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityTiIndicatorsUpdateTiIndicators_Call(request, onOk, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityTiIndicatorsUpdateTiIndicators" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityTiIndicatorsUpdateTiIndicators_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage,
        //                Task<MicrosoftGraphTiIndicator[]>,
        //                Task>
        //            onOk,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.OK:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onOk(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                If(
        //                                    JsonArray.Parse(body.Result), out var __y)
        //                                    ? new Func<MicrosoftGraphTiIndicator[]>(() =>
        //                                        Enumerable.ToArray(
        //                                            Enumerable.Select(__y,
        //                                                __x => (MicrosoftGraphTiIndicator) MicrosoftGraphTiIndicator
        //                                                    .FromJson(__x))))()
        //                                    : null));
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityTiIndicatorsUpdateTiIndicators" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="body">Action parameters</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityTiIndicatorsUpdateTiIndicators_Validate(
        //        Paths3Ccfi6SecurityTiindicatorsMicrosoftGraphUpdatetiindicatorsPostRequestbodyContentApplicationJsonSchema
        //            body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateAlerts(string alertId, MicrosoftGraphAlert body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/alerts/"
        //                + Uri.EscapeDataString(alertId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateAlerts_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateAlerts1(string alertId, MicrosoftGraphAlert body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/alerts/"
        //                + Uri.EscapeDataString(alertId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateAlerts1_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateAlerts1ViaIdentity(
        //        string viaIdentity, MicrosoftGraphAlert body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/alerts/(?<alertId>[^/]+)$")
        //                .Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/alerts/{alertId}'");

        //            // replace URI parameters with values from identity
        //            var alertId = _match.Groups["alertId"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/alerts/"
        //                + alertId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateAlerts1_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateAlerts1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateAlerts1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateAlerts1" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateAlerts1_Validate(string alertId,
        //        MicrosoftGraphAlert body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(alertId), alertId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Read-only. Nullable.</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateAlertsViaIdentity(
        //        string viaIdentity, MicrosoftGraphAlert body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match = new Regex("^/security/alerts/(?<alertId>[^/]+)$")
        //                .Match(viaIdentity);
        //            if (!_match.Success) throw new Exception("Invalid identity for URI '/security/alerts/{alertId}'");

        //            // replace URI parameters with values from identity
        //            var alertId = _match.Groups["alertId"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/alerts/"
        //                + alertId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateAlerts_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateAlerts" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateAlerts_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateAlerts" /> method. Call this like the actual call, but you will get
        //    ///     validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="alertId">key: id of alert</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateAlerts_Validate(string alertId,
        //        MicrosoftGraphAlert body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(alertId), alertId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property cloudAppSecurityProfiles in security</summary>
        //    /// <param name="cloudAppSecurityProfileId">key: id of cloudAppSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateCloudAppSecurityProfiles(
        //        string cloudAppSecurityProfileId, MicrosoftGraphCloudAppSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/cloudAppSecurityProfiles/"
        //                + Uri.EscapeDataString(cloudAppSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateCloudAppSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property cloudAppSecurityProfiles in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateCloudAppSecurityProfilesViaIdentity(
        //        string viaIdentity, MicrosoftGraphCloudAppSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/cloudAppSecurityProfiles/(?<cloudAppSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/cloudAppSecurityProfiles/{cloudAppSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var cloudAppSecurityProfileId = _match.Groups["cloudAppSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/cloudAppSecurityProfiles/"
        //                + cloudAppSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateCloudAppSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityUpdateCloudAppSecurityProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateCloudAppSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateCloudAppSecurityProfiles" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="cloudAppSecurityProfileId">key: id of cloudAppSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateCloudAppSecurityProfiles_Validate(
        //        string cloudAppSecurityProfileId, MicrosoftGraphCloudAppSecurityProfile body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(cloudAppSecurityProfileId), cloudAppSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property domainSecurityProfiles in security</summary>
        //    /// <param name="domainSecurityProfileId">key: id of domainSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateDomainSecurityProfiles(
        //        string domainSecurityProfileId, MicrosoftGraphDomainSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/domainSecurityProfiles/"
        //                + Uri.EscapeDataString(domainSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateDomainSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property domainSecurityProfiles in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateDomainSecurityProfilesViaIdentity(
        //        string viaIdentity, MicrosoftGraphDomainSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/domainSecurityProfiles/(?<domainSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/domainSecurityProfiles/{domainSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var domainSecurityProfileId = _match.Groups["domainSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/domainSecurityProfiles/"
        //                + domainSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateDomainSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityUpdateDomainSecurityProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateDomainSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateDomainSecurityProfiles" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="domainSecurityProfileId">key: id of domainSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateDomainSecurityProfiles_Validate(
        //        string domainSecurityProfileId, MicrosoftGraphDomainSecurityProfile body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(domainSecurityProfileId), domainSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property fileSecurityProfiles in security</summary>
        //    /// <param name="fileSecurityProfileId">key: id of fileSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateFileSecurityProfiles(
        //        string fileSecurityProfileId, MicrosoftGraphFileSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/fileSecurityProfiles/"
        //                + Uri.EscapeDataString(fileSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateFileSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property fileSecurityProfiles in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateFileSecurityProfilesViaIdentity(
        //        string viaIdentity, MicrosoftGraphFileSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/fileSecurityProfiles/(?<fileSecurityProfileid>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/fileSecurityProfiles/{fileSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var fileSecurityProfileId = _match.Groups["fileSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/fileSecurityProfiles/"
        //                + fileSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateFileSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateFileSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateFileSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateFileSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="fileSecurityProfileId">key: id of fileSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateFileSecurityProfiles_Validate(
        //        string fileSecurityProfileId, MicrosoftGraphFileSecurityProfile body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(fileSecurityProfileId), fileSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property hostSecurityProfiles in security</summary>
        //    /// <param name="hostSecurityProfileId">key: id of hostSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateHostSecurityProfiles(
        //        string hostSecurityProfileId, MicrosoftGraphHostSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/hostSecurityProfiles/"
        //                + Uri.EscapeDataString(hostSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateHostSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property hostSecurityProfiles in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateHostSecurityProfilesViaIdentity(
        //        string viaIdentity, MicrosoftGraphHostSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/hostSecurityProfiles/(?<hostSecurityProfileid>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/hostSecurityProfiles/{hostSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var hostSecurityProfileId = _match.Groups["hostSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/hostSecurityProfiles/"
        //                + hostSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateHostSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateHostSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateHostSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateHostSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="hostSecurityProfileId">key: id of hostSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateHostSecurityProfiles_Validate(
        //        string hostSecurityProfileId, MicrosoftGraphHostSecurityProfile body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(hostSecurityProfileId), hostSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property ipSecurityProfiles in security</summary>
        //    /// <param name="ipSecurityProfileId">key: id of ipSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateIPSecurityProfiles(string ipSecurityProfileId,
        //        MicrosoftGraphIPSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/ipSecurityProfiles/"
        //                + Uri.EscapeDataString(ipSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateIPSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property ipSecurityProfiles in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateIPSecurityProfilesViaIdentity(
        //        string viaIdentity, MicrosoftGraphIPSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/ipSecurityProfiles/(?<ipSecurityProfileid>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/ipSecurityProfiles/{ipSecurityProfileid}'");

        //            // replace URI parameters with values from identity
        //            var ipSecurityProfileId = _match.Groups["ipSecurityProfileid"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/ipSecurityProfiles/"
        //                + ipSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateIPSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateIPSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateIPSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateIPSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="ipSecurityProfileId">key: id of ipSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateIPSecurityProfiles_Validate(
        //        string ipSecurityProfileId, MicrosoftGraphIPSecurityProfile body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(ipSecurityProfileId), ipSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property providerTenantSettings in security</summary>
        //    /// <param name="providerTenantSettingId">key: id of providerTenantSetting</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateProviderTenantSettings(
        //        string providerTenantSettingId, MicrosoftGraphProviderTenantSetting body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/providerTenantSettings/"
        //                + Uri.EscapeDataString(providerTenantSettingId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateProviderTenantSettings_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property providerTenantSettings in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateProviderTenantSettingsViaIdentity(
        //        string viaIdentity, MicrosoftGraphProviderTenantSetting body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/providerTenantSettings/(?<providerTenantSetting-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/providerTenantSettings/{providerTenantSetting-id}'");

        //            // replace URI parameters with values from identity
        //            var providerTenantSettingId = _match.Groups["providerTenantSetting-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/providerTenantSettings/"
        //                + providerTenantSettingId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateProviderTenantSettings_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityUpdateProviderTenantSettings" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateProviderTenantSettings_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateProviderTenantSettings" /> method. Call this like the actual call,
        //    ///     but
        //    ///     you will get validation events back.
        //    /// </summary>
        //    /// <param name="providerTenantSettingId">key: id of providerTenantSetting</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateProviderTenantSettings_Validate(
        //        string providerTenantSettingId, MicrosoftGraphProviderTenantSetting body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(providerTenantSettingId), providerTenantSettingId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property secureScoreControlProfiles in security</summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecureScoreControlProfiles(
        //        string secureScoreControlProfileId, MicrosoftGraphSecureScoreControlProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScoreControlProfiles/"
        //                + Uri.EscapeDataString(secureScoreControlProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecureScoreControlProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property secureScoreControlProfiles in security</summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecureScoreControlProfiles1(
        //        string secureScoreControlProfileId, MicrosoftGraphSecureScoreControlProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScoreControlProfiles/"
        //                + Uri.EscapeDataString(secureScoreControlProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecureScoreControlProfiles1_Call(request, onNoContent, onDefault,
        //                eventListener, sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property secureScoreControlProfiles in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecureScoreControlProfiles1ViaIdentity(
        //        string viaIdentity, MicrosoftGraphSecureScoreControlProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                        "^/security/secureScoreControlProfiles/(?<secureScoreControlProfile-id>[^/]+)$")
        //                    .Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScoreControlProfiles/{secureScoreControlProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreControlProfileId = _match.Groups["secureScoreControlProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScoreControlProfiles/"
        //                + secureScoreControlProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecureScoreControlProfiles1_Call(request, onNoContent, onDefault,
        //                eventListener, sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityUpdateSecureScoreControlProfiles1" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecureScoreControlProfiles1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateSecureScoreControlProfiles1" /> method. Call this like the actual
        //    ///     call,
        //    ///     but you will get validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecureScoreControlProfiles1_Validate(
        //        string secureScoreControlProfileId, MicrosoftGraphSecureScoreControlProfile body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreControlProfileId), secureScoreControlProfileId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property secureScoreControlProfiles in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecureScoreControlProfilesViaIdentity(
        //        string viaIdentity, MicrosoftGraphSecureScoreControlProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                        "^/security/secureScoreControlProfiles/(?<secureScoreControlProfile-id>[^/]+)$")
        //                    .Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScoreControlProfiles/{secureScoreControlProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreControlProfileId = _match.Groups["secureScoreControlProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScoreControlProfiles/"
        //                + secureScoreControlProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecureScoreControlProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>
        //    ///     Actual wire call for <see cref="SecurityUpdateSecureScoreControlProfiles" /> method.
        //    /// </summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecureScoreControlProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateSecureScoreControlProfiles" /> method. Call this like the actual
        //    ///     call,
        //    ///     but you will get validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreControlProfileId">key: id of secureScoreControlProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecureScoreControlProfiles_Validate(
        //        string secureScoreControlProfileId, MicrosoftGraphSecureScoreControlProfile body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreControlProfileId), secureScoreControlProfileId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property secureScores in security</summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecureScores(string secureScoreId,
        //        MicrosoftGraphSecureScore body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScores/"
        //                + Uri.EscapeDataString(secureScoreId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecureScores_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property secureScores in security</summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecureScores1(string secureScoreId,
        //        MicrosoftGraphSecureScore body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScores/"
        //                + Uri.EscapeDataString(secureScoreId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecureScores1_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property secureScores in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecureScores1ViaIdentity(
        //        string viaIdentity, MicrosoftGraphSecureScore body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/secureScores/(?<secureScore-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScores/{secureScore-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreId = _match.Groups["secureScore-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security/secureScores/"
        //                + secureScoreId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecureScores1_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateSecureScores1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecureScores1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateSecureScores1" /> method. Call this like the actual call, but you
        //    ///     will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecureScores1_Validate(string secureScoreId,
        //        MicrosoftGraphSecureScore body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreId), secureScoreId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property secureScores in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecureScoresViaIdentity(
        //        string viaIdentity, MicrosoftGraphSecureScore body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/secureScores/(?<secureScore-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/secureScores/{secureScore-id}'");

        //            // replace URI parameters with values from identity
        //            var secureScoreId = _match.Groups["secureScore-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/secureScores/"
        //                + secureScoreId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecureScores_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateSecureScores" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecureScores_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateSecureScores" /> method. Call this like the actual call, but you
        //    ///     will get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="secureScoreId">key: id of secureScore</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecureScores_Validate(string secureScoreId,
        //        MicrosoftGraphSecureScore body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(secureScoreId), secureScoreId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update security</summary>
        //    /// <param name="body">New property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecurity(MicrosoftGraphSecurity body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecurity_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Update security</summary>
        //    /// <param name="body">New property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecurity1(MicrosoftGraphSecurity1 body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/v1.0/security"
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecurity1_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateSecurity1" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecurity1_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateSecurity1" /> method. Call this like the actual call, but you will
        //    ///     get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="body">New property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecurity1_Validate(
        //        MicrosoftGraphSecurity1 body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property securityActions in security</summary>
        //    /// <param name="securityActionId">key: id of securityAction</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecurityActions(string securityActionId,
        //        MicrosoftGraphSecurityAction body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/securityActions/"
        //                + Uri.EscapeDataString(securityActionId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecurityActions_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property securityActions in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateSecurityActionsViaIdentity(
        //        string viaIdentity, MicrosoftGraphSecurityAction body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/securityActions/(?<securityAction-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/securityActions/{securityAction-id}'");

        //            // replace URI parameters with values from identity
        //            var securityActionId = _match.Groups["securityAction-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/securityActions/"
        //                + securityActionId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateSecurityActions_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateSecurityActions" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecurityActions_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateSecurityActions" /> method. Call this like the actual call, but you
        //    ///     will
        //    ///     get validation events back.
        //    /// </summary>
        //    /// <param name="securityActionId">key: id of securityAction</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecurityActions_Validate(
        //        string securityActionId, MicrosoftGraphSecurityAction body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(securityActionId), securityActionId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateSecurity" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecurity_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateSecurity" /> method. Call this like the actual call, but you will
        //    ///     get validation
        //    ///     events back.
        //    /// </summary>
        //    /// <param name="body">New property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateSecurity_Validate(MicrosoftGraphSecurity body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property tiIndicators in security</summary>
        //    /// <param name="tiIndicatorId">key: id of tiIndicator</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateTiIndicators(string tiIndicatorId,
        //        MicrosoftGraphTiIndicator body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators/"
        //                + Uri.EscapeDataString(tiIndicatorId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateTiIndicators_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property tiIndicators in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateTiIndicatorsViaIdentity(
        //        string viaIdentity, MicrosoftGraphTiIndicator body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/tiIndicators/(?<tiIndicator-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/tiIndicators/{tiIndicator-id}'");

        //            // replace URI parameters with values from identity
        //            var tiIndicatorId = _match.Groups["tiIndicator-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/tiIndicators/"
        //                + tiIndicatorId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateTiIndicators_Call(request, onNoContent, onDefault, eventListener, sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateTiIndicators" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateTiIndicators_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateTiIndicators" /> method. Call this like the actual call, but you
        //    ///     will get
        //    ///     validation events back.
        //    /// </summary>
        //    /// <param name="tiIndicatorId">key: id of tiIndicator</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateTiIndicators_Validate(string tiIndicatorId,
        //        MicrosoftGraphTiIndicator body, IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(tiIndicatorId), tiIndicatorId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }

        //    /// <summary>Update the navigation property userSecurityProfiles in security</summary>
        //    /// <param name="userSecurityProfileId">key: id of userSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateUserSecurityProfiles(
        //        string userSecurityProfileId, MicrosoftGraphUserSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/userSecurityProfiles/"
        //                + Uri.EscapeDataString(userSecurityProfileId)
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateUserSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Update the navigation property userSecurityProfiles in security</summary>
        //    /// <param name="viaIdentity"></param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    public async Task SecurityUpdateUserSecurityProfilesViaIdentity(
        //        string viaIdentity, MicrosoftGraphUserSecurityProfile body,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        // Constant Parameters
        //        using (NoSynchronizationContext)
        //        {
        //            // verify that Identity format is an exact match for uri

        //            var _match =
        //                new Regex(
        //                    "^/security/userSecurityProfiles/(?<userSecurityProfile-id>[^/]+)$").Match(viaIdentity);
        //            if (!_match.Success)
        //                throw new Exception(
        //                    "Invalid identity for URI '/security/userSecurityProfiles/{userSecurityProfile-id}'");

        //            // replace URI parameters with values from identity
        //            var userSecurityProfileId = _match.Groups["userSecurityProfile-id"].Value;
        //            // construct URL
        //            var _url = new Uri(Regex.Replace(
        //                "https://graph.microsoft.com/beta/security/userSecurityProfiles/"
        //                + userSecurityProfileId
        //                , "\\?&*$|&*$|(\\?)&+|(&)&+", "$1$2"));

        //            await eventListener.Signal(Events.URLCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // generate request object
        //            var request =
        //                new HttpRequestMessage(Method.Patch,
        //                    _url);
        //            await eventListener.Signal(Events.RequestCreated, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            await eventListener.Signal(Events.HeaderParametersAdded, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // set body content
        //            request.Content = new StringContent(
        //                null != body ? body.ToJson(null).ToString() : @"{}", Encoding.UTF8);
        //            request.Content.Headers.ContentType =
        //                MediaTypeHeaderValue.Parse("application/json");
        //            await eventListener.Signal(Events.BodyContentSet, _url);
        //            if (eventListener.Token.IsCancellationRequested) return;

        //            // make the call
        //            await SecurityUpdateUserSecurityProfiles_Call(request, onNoContent, onDefault, eventListener,
        //                sender);
        //        }
        //    }

        //    /// <summary>Actual wire call for <see cref="SecurityUpdateUserSecurityProfiles" /> method.</summary>
        //    /// <param name="request">the prepared HttpRequestMessage to send.</param>
        //    /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        //    /// <param name="onDefault">
        //    ///     a delegate that is called when the remote service returns default (any response code not handled
        //    ///     elsewhere).
        //    /// </param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <param name="sender">
        //    ///     an instance of an Microsoft.Graph.PowerShell.Runtime.ISendAsync pipeline to use to make the
        //    ///     request.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateUserSecurityProfiles_Call(
        //        HttpRequestMessage request,
        //        Func<HttpResponseMessage, Task>
        //            onNoContent,
        //        Func<HttpResponseMessage,
        //            Task<IOdataError>, Task> onDefault,
        //        IEventListener eventListener,
        //        ISendAsync sender)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            HttpResponseMessage _response = null;
        //            try
        //            {
        //                await eventListener.Signal(Events.BeforeCall, request);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                _response = await sender.SendAsync(request, eventListener);
        //                await eventListener.Signal(Events.ResponseCreated, _response);
        //                if (eventListener.Token.IsCancellationRequested) return;

        //                var _contentType = _response.Content.Headers.ContentType?.MediaType;

        //                switch (_response.StatusCode)
        //                {
        //                    case HttpStatusCode.NoContent:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onNoContent(_response);
        //                        break;
        //                    }
        //                    default:
        //                    {
        //                        await eventListener.Signal(Events.BeforeResponseDispatch,
        //                            _response);
        //                        if (eventListener.Token.IsCancellationRequested) return;

        //                        await onDefault(_response,
        //                            _response.Content.ReadAsStringAsync().ContinueWith(body =>
        //                                OdataError.FromJson(
        //                                    JsonNode.Parse(body.Result))));
        //                        break;
        //                    }
        //                }
        //            }
        //            finally
        //            {
        //                // finally statements
        //                await eventListener.Signal(Events.Finally, request, _response);
        //                _response?.Dispose();
        //                request?.Dispose();
        //            }
        //        }
        //    }

        //    /// <summary>
        //    ///     Validation method for <see cref="SecurityUpdateUserSecurityProfiles" /> method. Call this like the actual call, but
        //    ///     you
        //    ///     will get validation events back.
        //    /// </summary>
        //    /// <param name="userSecurityProfileId">key: id of userSecurityProfile</param>
        //    /// <param name="body">New navigation property values</param>
        //    /// <param name="eventListener">
        //    ///     an <see cref="Microsoft.Graph.PowerShell.Runtime.IEventListener" /> instance that will
        //    ///     receive events.
        //    /// </param>
        //    /// <returns>
        //    ///     A <see cref="Task" /> that will be complete when handling of the response is
        //    ///     completed.
        //    /// </returns>
        //    internal async Task SecurityUpdateUserSecurityProfiles_Validate(
        //        string userSecurityProfileId, MicrosoftGraphUserSecurityProfile body,
        //        IEventListener eventListener)
        //    {
        //        using (NoSynchronizationContext)
        //        {
        //            await eventListener.AssertNotNull(nameof(userSecurityProfileId), userSecurityProfileId);
        //            await eventListener.AssertNotNull(nameof(body), body);
        //            await eventListener.AssertObjectIsValid(nameof(body), body);
        //        }
        //    }
    }
}
