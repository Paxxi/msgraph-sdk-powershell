// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6306, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using Microsoft.Graph.PowerShell.Runtime;

namespace Microsoft.Graph.PowerShell.Security.Models
{
    /// <summary>process</summary>
    public class MicrosoftGraphProcess
    {
        /// <summary>Backing field for <see cref="AccountName" /> property.</summary>
        private string _accountName;

        /// <summary>Backing field for <see cref="CommandLine" /> property.</summary>
        private string _commandLine;

        /// <summary>Backing field for <see cref="CreatedDateTime" /> property.</summary>
        private DateTime? _createdDateTime;

        /// <summary>Backing field for <see cref="FileHash" /> property.</summary>
        private MicrosoftGraphFileHash _fileHash;

        /// <summary>Backing field for <see cref="IntegrityLevel" /> property.</summary>
        private string _integrityLevel;

        /// <summary>Backing field for <see cref="IsElevated" /> property.</summary>
        private bool? _isElevated;

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Backing field for <see cref="ParentProcessCreatedDateTime" /> property.</summary>
        private DateTime? _parentProcessCreatedDateTime;

        /// <summary>Backing field for <see cref="ParentProcessId" /> property.</summary>
        private int? _parentProcessId;

        /// <summary>Backing field for <see cref="ParentProcessName" /> property.</summary>
        private string _parentProcessName;

        /// <summary>Backing field for <see cref="Path" /> property.</summary>
        private string _path;

        /// <summary>Backing field for <see cref="ProcessId" /> property.</summary>
        private int? _processId;

        /// <summary>
        ///     User account identifier (user account context the process ran under) for example, AccountName, SID, and so on.
        /// </summary>
        [Origin(PropertyOrigin.Owned)]
        public string AccountName
        {
            get => _accountName;
            set => _accountName = value;
        }

        /// <summary>The full process invocation commandline including all parameters.</summary>
        [Origin(PropertyOrigin.Owned)]
        public string CommandLine
        {
            get => _commandLine;
            set => _commandLine = value;
        }

        /// <summary>
        ///     Time at which the process was started. The Timestamp type represents date and time information using ISO 8601
        ///     format and
        ///     is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        [Origin(PropertyOrigin.Owned)]
        public DateTime? CreatedDateTime
        {
            get => _createdDateTime;
            set => _createdDateTime = value;
        }

        /// <summary>fileHash</summary>
        [Origin(PropertyOrigin.Owned)]
        public MicrosoftGraphFileHash FileHash
        {
            get => _fileHash = _fileHash ?? new MicrosoftGraphFileHash();
            set => _fileHash = value;
        }

        /// <summary>processIntegrityLevel</summary>
        [Origin(PropertyOrigin.Owned)]
        public string IntegrityLevel
        {
            get => _integrityLevel;
            set => _integrityLevel = value;
        }

        /// <summary>True if the process is elevated.</summary>
        [Origin(PropertyOrigin.Owned)]
        public bool? IsElevated
        {
            get => _isElevated;
            set => _isElevated = value;
        }

        /// <summary>The name of the process' Image file.</summary>
        [Origin(PropertyOrigin.Owned)]
        public string Name
        {
            get => _name;
            set => _name = value;
        }

        /// <summary>
        ///     DateTime at which the parent process was started. The Timestamp type represents date and time information using ISO
        ///     8601
        ///     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        [Origin(PropertyOrigin.Owned)]
        public DateTime? ParentProcessCreatedDateTime
        {
            get => _parentProcessCreatedDateTime;
            set => _parentProcessCreatedDateTime = value;
        }

        /// <summary>The Process ID (PID) of the parent process.</summary>
        [Origin(PropertyOrigin.Owned)]
        public int? ParentProcessId
        {
            get => _parentProcessId;
            set => _parentProcessId = value;
        }

        /// <summary>The name of the image file of the parent process.</summary>
        [Origin(PropertyOrigin.Owned)]
        public string ParentProcessName
        {
            get => _parentProcessName;
            set => _parentProcessName = value;
        }

        /// <summary>Full path, including filename.</summary>
        [Origin(PropertyOrigin.Owned)]
        public string Path
        {
            get => _path;
            set => _path = value;
        }

        /// <summary>The Process ID (PID) of the process.</summary>
        [Origin(PropertyOrigin.Owned)]
        public int? ProcessId
        {
            get => _processId;
            set => _processId = value;
        }
    }

    /// process
    public interface IMicrosoftGraphProcess :
        IJsonSerializable,
        IAssociativeArray<object>
    {
        /// <summary>
        ///     User account identifier (user account context the process ran under) for example, AccountName, SID, and so on.
        /// </summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description =
                @"User account identifier (user account context the process ran under) for example, AccountName, SID, and so on.",
            SerializedName = @"accountName",
            PossibleTypes = new[] {typeof(string)})]
        string AccountName { get; set; }

        /// <summary>The full process invocation commandline including all parameters.</summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"The full process invocation commandline including all parameters.",
            SerializedName = @"commandLine",
            PossibleTypes = new[] {typeof(string)})]
        string CommandLine { get; set; }

        /// <summary>
        ///     Time at which the process was started. The Timestamp type represents date and time information using ISO 8601
        ///     format and
        ///     is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description =
                @"Time at which the process was started. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.",
            SerializedName = @"createdDateTime",
            PossibleTypes = new[] {typeof(DateTime)})]
        DateTime? CreatedDateTime { get; set; }

        /// <summary>fileHash</summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"fileHash",
            SerializedName = @"fileHash",
            PossibleTypes = new[] {typeof(MicrosoftGraphFileHash)})]
        MicrosoftGraphFileHash FileHash { get; set; }

        /// <summary>processIntegrityLevel</summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"processIntegrityLevel",
            SerializedName = @"integrityLevel",
            PossibleTypes = new[] {typeof(string)})]
        string IntegrityLevel { get; set; }

        /// <summary>True if the process is elevated.</summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"True if the process is elevated.",
            SerializedName = @"isElevated",
            PossibleTypes = new[] {typeof(bool)})]
        bool? IsElevated { get; set; }

        /// <summary>The name of the process' Image file.</summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"The name of the process' Image file.",
            SerializedName = @"name",
            PossibleTypes = new[] {typeof(string)})]
        string Name { get; set; }

        /// <summary>
        ///     DateTime at which the parent process was started. The Timestamp type represents date and time information using ISO
        ///     8601
        ///     format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description =
                @"DateTime at which the parent process was started. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.",
            SerializedName = @"parentProcessCreatedDateTime",
            PossibleTypes = new[] {typeof(DateTime)})]
        DateTime? ParentProcessCreatedDateTime { get; set; }

        /// <summary>The Process ID (PID) of the parent process.</summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"The Process ID (PID) of the parent process.",
            SerializedName = @"parentProcessId",
            PossibleTypes = new[] {typeof(int)})]
        int? ParentProcessId { get; set; }

        /// <summary>The name of the image file of the parent process.</summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"The name of the image file of the parent process.",
            SerializedName = @"parentProcessName",
            PossibleTypes = new[] {typeof(string)})]
        string ParentProcessName { get; set; }

        /// <summary>Full path, including filename.</summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"Full path, including filename.",
            SerializedName = @"path",
            PossibleTypes = new[] {typeof(string)})]
        string Path { get; set; }

        /// <summary>The Process ID (PID) of the process.</summary>
        [Info(
            Required = false,
            ReadOnly = false,
            Description = @"The Process ID (PID) of the process.",
            SerializedName = @"processId",
            PossibleTypes = new[] {typeof(int)})]
        int? ProcessId { get; set; }
    }
}