// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6306, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Graph.PowerShell.Cmdlets
{
    using static Microsoft.Graph.PowerShell.Runtime.Extensions;

    /// <summary>Update the navigation property secureScoreControlProfiles in security</summary>
    /// <remarks>
    /// [OpenAPI] security_UpdateSecureScoreControlProfiles=>PATCH:"/security/secureScoreControlProfiles/{secureScoreControlProfile-id}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"MgSecuritySecureScoreControlProfile_UpdateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(bool))]
    [global::Microsoft.Graph.PowerShell.Description(@"Update the navigation property secureScoreControlProfiles in security")]
    [global::Microsoft.Graph.PowerShell.Generated]
    [global::Microsoft.Graph.PowerShell.Profile("v1.0-beta")]
    public partial class UpdateMgSecuritySecureScoreControlProfile_UpdateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Graph.PowerShell.Runtime.IEventListener
    {
        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Control action type (Config, Review, Behavior).</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Control action type (Config, Review, Behavior).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Control action type (Config, Review, Behavior).",
        SerializedName = @"actionType",
        PossibleTypes = new [] { typeof(string) })]
        public string ActionType { get => BodyParameterBody.ActionType ?? null; set => BodyParameterBody.ActionType = value; }

        /// <summary>URL to where the control can be actioned.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "URL to where the control can be actioned.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"URL to where the control can be actioned.",
        SerializedName = @"actionUrl",
        PossibleTypes = new [] { typeof(string) })]
        public string ActionUrl { get => BodyParameterBody.ActionUrl ?? null; set => BodyParameterBody.ActionUrl = value; }

        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Additional Parameters")]
        public global::System.Collections.Hashtable AdditionalProperties { get; set; } = new System.Collections.Hashtable();

        /// <summary>GUID string for tenant ID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "GUID string for tenant ID.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"GUID string for tenant ID.",
        SerializedName = @"azureTenantId",
        PossibleTypes = new [] { typeof(string) })]
        public string AzureTenantId { get => BodyParameterBody.AzureTenantId ?? null; set => BodyParameterBody.AzureTenantId = value; }

        /// <summary>Backing field for <see cref="BodyParameterBody" /> property.</summary>
        private Microsoft.Graph.PowerShell.Models.IMicrosoftGraphSecureScoreControlProfile _bodyParameterBody= new Microsoft.Graph.PowerShell.Models.MicrosoftGraphSecureScoreControlProfile();

        /// <summary>secureScoreControlProfile</summary>
        private Microsoft.Graph.PowerShell.Models.IMicrosoftGraphSecureScoreControlProfile BodyParameterBody { get => this._bodyParameterBody; set => this._bodyParameterBody = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Graph.PowerShell.Security Client => Microsoft.Graph.PowerShell.Module.Instance.ClientAPI;

        /// <summary>The collection of compliance information associated with secure score control</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The collection of compliance information associated with secure score control")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The collection of compliance information associated with secure score control",
        SerializedName = @"complianceInformation",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Models.IMicrosoftGraphComplianceInformation) })]
        public Microsoft.Graph.PowerShell.Models.IMicrosoftGraphComplianceInformation[] ComplianceInformation { get => BodyParameterBody.ComplianceInformation ?? null /* arrayOf */; set => BodyParameterBody.ComplianceInformation = value; }

        /// <summary>Control action category (Account, Data, Device, Apps, Infrastructure).</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Control action category (Account, Data, Device, Apps, Infrastructure).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Control action category (Account, Data, Device, Apps, Infrastructure).",
        SerializedName = @"controlCategory",
        PossibleTypes = new [] { typeof(string) })]
        public string ControlCategory { get => BodyParameterBody.ControlCategory ?? null; set => BodyParameterBody.ControlCategory = value; }

        /// <summary>
        /// Flag to indicate where the tenant has marked a control (ignore, thirdParty, reviewed) (supports update).
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Flag to indicate where the tenant has marked a control (ignore, thirdParty, reviewed) (supports update).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate where the tenant has marked a control (ignore, thirdParty, reviewed) (supports update).",
        SerializedName = @"controlStateUpdates",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Models.IMicrosoftGraphSecureScoreControlStateUpdate) })]
        public Microsoft.Graph.PowerShell.Models.IMicrosoftGraphSecureScoreControlStateUpdate[] ControlStateUpdates { get => BodyParameterBody.ControlStateUpdates ?? null /* arrayOf */; set => BodyParameterBody.ControlStateUpdates = value; }

        /// <summary>Flag to indicate if a control is depreciated.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Flag to indicate if a control is depreciated.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to indicate if a control is depreciated.",
        SerializedName = @"deprecated",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter Deprecated { get => BodyParameterBody.Deprecated ?? default(global::System.Management.Automation.SwitchParameter); set => BodyParameterBody.Deprecated = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Read-only.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Read-only.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Read-only.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string Id { get => BodyParameterBody.Id ?? null; set => BodyParameterBody.Id = value; }

        /// <summary>Resource cost of implemmentating control (low, moderate, high).</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource cost of implemmentating control (low, moderate, high).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource cost of implemmentating control (low, moderate, high).",
        SerializedName = @"implementationCost",
        PossibleTypes = new [] { typeof(string) })]
        public string ImplementationCost { get => BodyParameterBody.ImplementationCost ?? null; set => BodyParameterBody.ImplementationCost = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// Time at which the control profile entity was last modified. The Timestamp type represents date and time
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Time at which the control profile entity was last modified. The Timestamp type represents date and time")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time at which the control profile entity was last modified. The Timestamp type represents date and time",
        SerializedName = @"lastModifiedDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime LastModifiedDateTime { get => BodyParameterBody.LastModifiedDateTime ?? default(global::System.DateTime); set => BodyParameterBody.LastModifiedDateTime = value; }

        /// <summary>Current obtained max score on specified date.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Current obtained max score on specified date.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Current obtained max score on specified date.",
        SerializedName = @"maxScore",
        PossibleTypes = new [] { typeof(double) })]
        public double MaxScore { get => BodyParameterBody.MaxScore ?? default(double); set => BodyParameterBody.MaxScore = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Graph.PowerShell.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Graph.PowerShell.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// When specified, forces the cmdlet return a 'bool' given that there isn't a return type by default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Returns true when the command succeeds")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter PassThru { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Graph.PowerShell.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Graph.PowerShell.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Microsoft's stack ranking of control.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Microsoft's stack ranking of control.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Microsoft's stack ranking of control.",
        SerializedName = @"rank",
        PossibleTypes = new [] { typeof(int) })]
        public int Rank { get => BodyParameterBody.Rank ?? default(int); set => BodyParameterBody.Rank = value; }

        /// <summary>Description of what the control will help remediate.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Description of what the control will help remediate.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Description of what the control will help remediate.",
        SerializedName = @"remediation",
        PossibleTypes = new [] { typeof(string) })]
        public string Remediation { get => BodyParameterBody.Remediation ?? null; set => BodyParameterBody.Remediation = value; }

        /// <summary>Description of the impact on users of the remediation.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Description of the impact on users of the remediation.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Description of the impact on users of the remediation.",
        SerializedName = @"remediationImpact",
        PossibleTypes = new [] { typeof(string) })]
        public string RemediationImpact { get => BodyParameterBody.RemediationImpact ?? null; set => BodyParameterBody.RemediationImpact = value; }

        /// <summary>Backing field for <see cref="SecureScoreControlProfileId" /> property.</summary>
        private string _secureScoreControlProfileId;

        /// <summary>key: id of secureScoreControlProfile</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "key: id of secureScoreControlProfile")]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"key: id of secureScoreControlProfile",
        SerializedName = @"secureScoreControlProfile-id",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Path)]
        public string SecureScoreControlProfileId { get => this._secureScoreControlProfileId; set => this._secureScoreControlProfileId = value; }

        /// <summary>Service that owns the control (Exchange, Sharepoint, Azure AD).</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Service that owns the control (Exchange, Sharepoint, Azure AD).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Service that owns the control (Exchange, Sharepoint, Azure AD).",
        SerializedName = @"service",
        PossibleTypes = new [] { typeof(string) })]
        public string Service { get => BodyParameterBody.Service ?? null; set => BodyParameterBody.Service = value; }

        /// <summary>
        /// List of threats the control mitigates (accountBreach,dataDeletion,dataExfiltration,dataSpillage,elevationOfPrivilege,maliciousInsider,passwordCracking,phishingOrWhaling,spoofing).
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "List of threats the control mitigates (accountBreach,dataDeletion,dataExfiltration,dataSpillage,elevationOfPrivilege,maliciousInsider,passwordCracking,phishingOrWhaling,spoofing).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of threats the control mitigates (accountBreach,dataDeletion,dataExfiltration,dataSpillage,elevationOfPrivilege,maliciousInsider,passwordCracking,phishingOrWhaling,spoofing).",
        SerializedName = @"threats",
        PossibleTypes = new [] { typeof(string) })]
        public string[] Threats { get => BodyParameterBody.Threats ?? null /* arrayOf */; set => BodyParameterBody.Threats = value; }

        /// <summary>Control tier (Core, Defense in Depth, Advanced.)</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Control tier (Core, Defense in Depth, Advanced.)")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Control tier (Core, Defense in Depth, Advanced.)",
        SerializedName = @"tier",
        PossibleTypes = new [] { typeof(string) })]
        public string Tier { get => BodyParameterBody.Tier ?? null; set => BodyParameterBody.Tier = value; }

        /// <summary>Title of the control.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Title of the control.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Title of the control.",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        public string Title { get => BodyParameterBody.Title ?? null; set => BodyParameterBody.Title = value; }

        /// <summary>User impact of implementing control (low, moderate, high).</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "User impact of implementing control (low, moderate, high).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User impact of implementing control (low, moderate, high).",
        SerializedName = @"userImpact",
        PossibleTypes = new [] { typeof(string) })]
        public string UserImpact { get => BodyParameterBody.UserImpact ?? null; set => BodyParameterBody.UserImpact = value; }

        /// <summary>securityVendorInformation</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "securityVendorInformation")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"securityVendorInformation",
        SerializedName = @"vendorInformation",
        PossibleTypes = new [] { typeof(Microsoft.Graph.PowerShell.Models.IMicrosoftGraphSecurityVendorInformation) })]
        public Microsoft.Graph.PowerShell.Models.IMicrosoftGraphSecurityVendorInformation VendorInformation { get => BodyParameterBody.VendorInformation ?? null /* object */; set => BodyParameterBody.VendorInformation = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="IOdataError" /> from the remote
        /// call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<IOdataError> response, ref global::System.Threading.Tasks.Task<bool> returnNow) => this.OverrideOnDefault(responseMessage,ref returnNow);

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<IOdataError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnNoContent</c> will be called before the regular onNoContent has been processed, allowing customization of
        /// what happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="returnNow">/// Determines if the rest of the onNoContent method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnNoContent(global::System.Net.Http.HttpResponseMessage responseMessage, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Graph.PowerShell.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletEndProcessing).Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Graph.PowerShell.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Graph.PowerShell.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Graph.PowerShell.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data, new[] { data.Message });
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Graph.PowerShell.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Graph.PowerShell.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Graph.PowerShell.Runtime.EventData ), InvocationInformation, this.ParameterSetName, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            try
            {
                // work
                if (ShouldProcess($"Call remote 'SecurityUpdateSecureScoreControlProfiles' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Graph.PowerShell.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                Microsoft.Graph.PowerShell.Runtime.DictionaryExtensions.HashTableToDictionary<global::System.Object>(AdditionalProperties,BodyParameterBody.AdditionalProperties);
                await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordAsyncStart); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Graph.PowerShell.Module.Instance.CreatePipeline(InvocationInformation, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Graph.PowerShell.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Graph.PowerShell.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.SecurityUpdateSecureScoreControlProfiles(SecureScoreControlProfileId, BodyParameterBody, onNoContent, onDefault, this, Pipeline);
                    await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Graph.PowerShell.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SecureScoreControlProfileId=SecureScoreControlProfileId,body=BodyParameterBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="UpdateMgSecuritySecureScoreControlProfile_UpdateExpanded" /> cmdlet class.
        /// </summary>
        public UpdateMgSecuritySecureScoreControlProfile_UpdateExpanded()
        {

        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="IOdataError" /> from the remote
        /// call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<IOdataError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                // Unrecognized Response. Create an error record based on what we have.
                var ex = new Microsoft.Graph.PowerShell.Runtime.RestException<IOdataError>(responseMessage, await response);
                WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SecureScoreControlProfileId=SecureScoreControlProfileId, body=BodyParameterBody })
                {
                  ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                });
            }
        }

        /// <summary>a delegate that is called when the remote service returns 204 (NoContent).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onNoContent(global::System.Net.Http.HttpResponseMessage responseMessage)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnNoContent(responseMessage, ref _returnNow);
                // if overrideOnNoContent has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onNoContent - response for 204 /
                if (true == MyInvocation?.BoundParameters?.ContainsKey("PassThru"))
                {
                    WriteObject(true);
                }
            }
        }
    }
}