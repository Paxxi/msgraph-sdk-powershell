// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6306, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Graph.PowerShell.Cmdlets
{
    using static Microsoft.Graph.PowerShell.Runtime.Extensions;

    /// <summary>Update the navigation property tiIndicators in security</summary>
    /// <remarks>
    /// [OpenAPI] security_UpdateTiIndicators=>PATCH:"/security/tiIndicators/{tiIndicator-id}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"MgSecurityTiIndicator_UpdateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(bool))]
    [global::Microsoft.Graph.PowerShell.Description(@"Update the navigation property tiIndicators in security")]
    [global::Microsoft.Graph.PowerShell.Generated]
    [global::Microsoft.Graph.PowerShell.Profile("v1.0-beta")]
    public partial class UpdateMgSecurityTiIndicator_UpdateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Graph.PowerShell.Runtime.IEventListener
    {
        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>tiAction</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "tiAction")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"tiAction",
        SerializedName = @"action",
        PossibleTypes = new [] { typeof(string) })]
        public string Action { get => BodyParameterBody.Action ?? null; set => BodyParameterBody.Action = value; }

        /// <summary>
        /// The cyber threat intelligence name(s) for the parties responsible for the malicious activity covered by the threat indicator.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The cyber threat intelligence name(s) for the parties responsible for the malicious activity covered by the threat indicator.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The cyber threat intelligence name(s) for the parties responsible for the malicious activity covered by the threat indicator.",
        SerializedName = @"activityGroupNames",
        PossibleTypes = new [] { typeof(string) })]
        public string[] ActivityGroupNames { get => BodyParameterBody.ActivityGroupNames ?? null /* arrayOf */; set => BodyParameterBody.ActivityGroupNames = value; }

        /// <summary>
        /// A catchall area into which extra data from the indicator not covered by the other tiIndicator properties may be placed.
        /// Data placed into additionalInformation will typically not be utilized by the targetProduct security tool.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A catchall area into which extra data from the indicator not covered by the other tiIndicator properties may be placed. Data placed into additionalInformation will typically not be utilized by the targetProduct security tool.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A catchall area into which extra data from the indicator not covered by the other tiIndicator properties may be placed. Data placed into additionalInformation will typically not be utilized by the targetProduct security tool.",
        SerializedName = @"additionalInformation",
        PossibleTypes = new [] { typeof(string) })]
        public string AdditionalInformation { get => BodyParameterBody.AdditionalInformation ?? null; set => BodyParameterBody.AdditionalInformation = value; }

        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Additional Parameters")]
        public global::System.Collections.Hashtable AdditionalProperties { get; set; } = new System.Collections.Hashtable();

        /// <summary>
        /// Stamped by the system when the indicator is ingested. The Azure Active Directory tenant id of submitting client. Required.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Stamped by the system when the indicator is ingested. The Azure Active Directory tenant id of submitting client. Required.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Stamped by the system when the indicator is ingested. The Azure Active Directory tenant id of submitting client. Required.",
        SerializedName = @"azureTenantId",
        PossibleTypes = new [] { typeof(string) })]
        public string AzureTenantId { get => BodyParameterBody.AzureTenantId ?? null; set => BodyParameterBody.AzureTenantId = value; }

        /// <summary>Backing field for <see cref="BodyParameterBody" /> property.</summary>
        private Microsoft.Graph.PowerShell.Models.IMicrosoftGraphTiIndicator _bodyParameterBody= new Microsoft.Graph.PowerShell.Models.MicrosoftGraphTiIndicator();

        /// <summary>tiIndicator</summary>
        private Microsoft.Graph.PowerShell.Models.IMicrosoftGraphTiIndicator BodyParameterBody { get => this._bodyParameterBody; set => this._bodyParameterBody = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Graph.PowerShell.Security Client => Microsoft.Graph.PowerShell.Module.Instance.ClientAPI;

        /// <summary>
        /// An integer representing the confidence the data within the indicator accurately identifies malicious behavior. Acceptable
        /// values are 0 – 100 with 100 being the highest.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "An integer representing the confidence the data within the indicator accurately identifies malicious behavior. Acceptable values are 0 – 100 with 100 being the highest.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An integer representing the confidence the data within the indicator accurately identifies malicious behavior. Acceptable values are 0 – 100 with 100 being the highest.",
        SerializedName = @"confidence",
        PossibleTypes = new [] { typeof(int) })]
        public int Confidence { get => BodyParameterBody.Confidence ?? default(int); set => BodyParameterBody.Confidence = value; }

        /// <summary>
        /// Brief description (100 characters or less) of the threat represented by the indicator. Required.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Brief description (100 characters or less) of the threat represented by the indicator. Required.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Brief description (100 characters or less) of the threat represented by the indicator. Required.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        public string Description { get => BodyParameterBody.Description ?? null; set => BodyParameterBody.Description = value; }

        /// <summary>diamondModel</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "diamondModel")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"diamondModel",
        SerializedName = @"diamondModel",
        PossibleTypes = new [] { typeof(string) })]
        public string DiamondModel { get => BodyParameterBody.DiamondModel ?? null; set => BodyParameterBody.DiamondModel = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        public string DomainName { get => BodyParameterBody.DomainName ?? null; set => BodyParameterBody.DomainName = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"emailEncoding",
        PossibleTypes = new [] { typeof(string) })]
        public string EmailEncoding { get => BodyParameterBody.EmailEncoding ?? null; set => BodyParameterBody.EmailEncoding = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"emailLanguage",
        PossibleTypes = new [] { typeof(string) })]
        public string EmailLanguage { get => BodyParameterBody.EmailLanguage ?? null; set => BodyParameterBody.EmailLanguage = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"emailRecipient",
        PossibleTypes = new [] { typeof(string) })]
        public string EmailRecipient { get => BodyParameterBody.EmailRecipient ?? null; set => BodyParameterBody.EmailRecipient = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"emailSenderAddress",
        PossibleTypes = new [] { typeof(string) })]
        public string EmailSenderAddress { get => BodyParameterBody.EmailSenderAddress ?? null; set => BodyParameterBody.EmailSenderAddress = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"emailSenderName",
        PossibleTypes = new [] { typeof(string) })]
        public string EmailSenderName { get => BodyParameterBody.EmailSenderName ?? null; set => BodyParameterBody.EmailSenderName = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"emailSourceDomain",
        PossibleTypes = new [] { typeof(string) })]
        public string EmailSourceDomain { get => BodyParameterBody.EmailSourceDomain ?? null; set => BodyParameterBody.EmailSourceDomain = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"emailSourceIpAddress",
        PossibleTypes = new [] { typeof(string) })]
        public string EmailSourceIPAddress { get => BodyParameterBody.EmailSourceIPAddress ?? null; set => BodyParameterBody.EmailSourceIPAddress = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"emailSubject",
        PossibleTypes = new [] { typeof(string) })]
        public string EmailSubject { get => BodyParameterBody.EmailSubject ?? null; set => BodyParameterBody.EmailSubject = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"emailXMailer",
        PossibleTypes = new [] { typeof(string) })]
        public string EmailXMailer { get => BodyParameterBody.EmailXMailer ?? null; set => BodyParameterBody.EmailXMailer = value; }

        /// <summary>
        /// DateTime string indicating when the Indicator expires. All indicators must have an expiration date to avoid stale indicators
        /// persisting in the system. The Timestamp type represents date and time information using ISO 8601 format and is always
        /// in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "DateTime string indicating when the Indicator expires. All indicators must have an expiration date to avoid stale indicators persisting in the system. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DateTime string indicating when the Indicator expires. All indicators must have an expiration date to avoid stale indicators persisting in the system. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.",
        SerializedName = @"expirationDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime ExpirationDateTime { get => BodyParameterBody.ExpirationDateTime ?? default(global::System.DateTime); set => BodyParameterBody.ExpirationDateTime = value; }

        /// <summary>
        /// An identification number that ties the indicator back to the indicator provider’s system (e.g. a foreign key).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "An identification number that ties the indicator back to the indicator provider’s system (e.g. a foreign key).")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An identification number that ties the indicator back to the indicator provider’s system (e.g. a foreign key).",
        SerializedName = @"externalId",
        PossibleTypes = new [] { typeof(string) })]
        public string ExternalId { get => BodyParameterBody.ExternalId ?? null; set => BodyParameterBody.ExternalId = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"fileCompileDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime FileCompileDateTime { get => BodyParameterBody.FileCompileDateTime ?? default(global::System.DateTime); set => BodyParameterBody.FileCompileDateTime = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"fileCreatedDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime FileCreatedDateTime { get => BodyParameterBody.FileCreatedDateTime ?? default(global::System.DateTime); set => BodyParameterBody.FileCreatedDateTime = value; }

        /// <summary>fileHashType</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "fileHashType")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"fileHashType",
        SerializedName = @"fileHashType",
        PossibleTypes = new [] { typeof(string) })]
        public string FileHashType { get => BodyParameterBody.FileHashType ?? null; set => BodyParameterBody.FileHashType = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"fileHashValue",
        PossibleTypes = new [] { typeof(string) })]
        public string FileHashValue { get => BodyParameterBody.FileHashValue ?? null; set => BodyParameterBody.FileHashValue = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"fileMutexName",
        PossibleTypes = new [] { typeof(string) })]
        public string FileMutexName { get => BodyParameterBody.FileMutexName ?? null; set => BodyParameterBody.FileMutexName = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"fileName",
        PossibleTypes = new [] { typeof(string) })]
        public string FileName { get => BodyParameterBody.FileName ?? null; set => BodyParameterBody.FileName = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"filePacker",
        PossibleTypes = new [] { typeof(string) })]
        public string FilePacker { get => BodyParameterBody.FilePacker ?? null; set => BodyParameterBody.FilePacker = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"filePath",
        PossibleTypes = new [] { typeof(string) })]
        public string FilePath { get => BodyParameterBody.FilePath ?? null; set => BodyParameterBody.FilePath = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"fileSize",
        PossibleTypes = new [] { typeof(long) })]
        public long FileSize { get => BodyParameterBody.FileSize ?? default(long); set => BodyParameterBody.FileSize = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"fileType",
        PossibleTypes = new [] { typeof(string) })]
        public string FileType { get => BodyParameterBody.FileType ?? null; set => BodyParameterBody.FileType = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public Microsoft.Graph.PowerShell.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Read-only.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Read-only.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Read-only.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string Id { get => BodyParameterBody.Id ?? null; set => BodyParameterBody.Id = value; }

        /// <summary>
        /// Stamped by the system when the indicator is ingested. The Timestamp type represents date and time information using ISO
        /// 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Stamped by the system when the indicator is ingested. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Stamped by the system when the indicator is ingested. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z",
        SerializedName = @"ingestedDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime IngestedDateTime { get => BodyParameterBody.IngestedDateTime ?? default(global::System.DateTime); set => BodyParameterBody.IngestedDateTime = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// Used to deactivate indicators within system. By default, any indicator submitted is set as active. However, providers
        /// may submit existing indicators with this set to ‘False’ to deactivate indicators in the system.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Used to deactivate indicators within system. By default, any indicator submitted is set as active. However, providers may submit existing indicators with this set to ‘False’ to deactivate indicators in the system.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Used to deactivate indicators within system. By default, any indicator submitted is set as active. However, providers may submit existing indicators with this set to ‘False’ to deactivate indicators in the system.",
        SerializedName = @"isActive",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter IsActive { get => BodyParameterBody.IsActive ?? default(global::System.Management.Automation.SwitchParameter); set => BodyParameterBody.IsActive = value; }

        /// <summary>
        /// A JSON array of strings that describes which point or points on the Kill Chain this indicator targets. See ‘killChain
        /// values’ below for exact values.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A JSON array of strings that describes which point or points on the Kill Chain this indicator targets. See ‘killChain values’ below for exact values.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A JSON array of strings that describes which point or points on the Kill Chain this indicator targets. See ‘killChain values’ below for exact values.",
        SerializedName = @"killChain",
        PossibleTypes = new [] { typeof(string) })]
        public string[] KillChain { get => BodyParameterBody.KillChain ?? null /* arrayOf */; set => BodyParameterBody.KillChain = value; }

        /// <summary>
        /// Scenarios in which the indicator may cause false positives. This should be human-readable text.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Scenarios in which the indicator may cause false positives. This should be human-readable text.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Scenarios in which the indicator may cause false positives. This should be human-readable text.",
        SerializedName = @"knownFalsePositives",
        PossibleTypes = new [] { typeof(string) })]
        public string KnownFalsePositives { get => BodyParameterBody.KnownFalsePositives ?? null; set => BodyParameterBody.KnownFalsePositives = value; }

        /// <summary>
        /// The last time the indicator was seen. The Timestamp type represents date and time information using ISO 8601 format and
        /// is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The last time the indicator was seen. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The last time the indicator was seen. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z",
        SerializedName = @"lastReportedDateTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime LastReportedDateTime { get => BodyParameterBody.LastReportedDateTime ?? default(global::System.DateTime); set => BodyParameterBody.LastReportedDateTime = value; }

        /// <summary>
        /// The malware family name associated with an indicator if it exists. Microsoft prefers the Microsoft malware family name
        /// if at all possible which can be found via the Windows Defender Security Intelligence threat encyclopedia.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The malware family name associated with an indicator if it exists. Microsoft prefers the Microsoft malware family name if at all possible which can be found via the Windows Defender Security Intelligence threat encyclopedia.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The malware family name associated with an indicator if it exists. Microsoft prefers the Microsoft malware family name if at all possible which can be found via the Windows Defender Security Intelligence threat encyclopedia.",
        SerializedName = @"malwareFamilyNames",
        PossibleTypes = new [] { typeof(string) })]
        public string[] MalwareFamilyNames { get => BodyParameterBody.MalwareFamilyNames ?? null /* arrayOf */; set => BodyParameterBody.MalwareFamilyNames = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Graph.PowerShell.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Graph.PowerShell.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkCidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkCidrBlock { get => BodyParameterBody.NetworkCidrBlock ?? null; set => BodyParameterBody.NetworkCidrBlock = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkDestinationAsn",
        PossibleTypes = new [] { typeof(long) })]
        public long NetworkDestinationAsn { get => BodyParameterBody.NetworkDestinationAsn ?? default(long); set => BodyParameterBody.NetworkDestinationAsn = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkDestinationCidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkDestinationCidrBlock { get => BodyParameterBody.NetworkDestinationCidrBlock ?? null; set => BodyParameterBody.NetworkDestinationCidrBlock = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkDestinationIPv4",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkDestinationIPv4 { get => BodyParameterBody.NetworkDestinationIPv4 ?? null; set => BodyParameterBody.NetworkDestinationIPv4 = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkDestinationIPv6",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkDestinationIPv6 { get => BodyParameterBody.NetworkDestinationIPv6 ?? null; set => BodyParameterBody.NetworkDestinationIPv6 = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkDestinationPort",
        PossibleTypes = new [] { typeof(int) })]
        public int NetworkDestinationPort { get => BodyParameterBody.NetworkDestinationPort ?? default(int); set => BodyParameterBody.NetworkDestinationPort = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkIPv4",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkIPv4 { get => BodyParameterBody.NetworkIPv4 ?? null; set => BodyParameterBody.NetworkIPv4 = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkIPv6",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkIPv6 { get => BodyParameterBody.NetworkIPv6 ?? null; set => BodyParameterBody.NetworkIPv6 = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkPort",
        PossibleTypes = new [] { typeof(int) })]
        public int NetworkPort { get => BodyParameterBody.NetworkPort ?? default(int); set => BodyParameterBody.NetworkPort = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkProtocol",
        PossibleTypes = new [] { typeof(int) })]
        public int NetworkProtocol { get => BodyParameterBody.NetworkProtocol ?? default(int); set => BodyParameterBody.NetworkProtocol = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkSourceAsn",
        PossibleTypes = new [] { typeof(long) })]
        public long NetworkSourceAsn { get => BodyParameterBody.NetworkSourceAsn ?? default(long); set => BodyParameterBody.NetworkSourceAsn = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkSourceCidrBlock",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkSourceCidrBlock { get => BodyParameterBody.NetworkSourceCidrBlock ?? null; set => BodyParameterBody.NetworkSourceCidrBlock = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkSourceIPv4",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkSourceIPv4 { get => BodyParameterBody.NetworkSourceIPv4 ?? null; set => BodyParameterBody.NetworkSourceIPv4 = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkSourceIPv6",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkSourceIPv6 { get => BodyParameterBody.NetworkSourceIPv6 ?? null; set => BodyParameterBody.NetworkSourceIPv6 = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"networkSourcePort",
        PossibleTypes = new [] { typeof(int) })]
        public int NetworkSourcePort { get => BodyParameterBody.NetworkSourcePort ?? default(int); set => BodyParameterBody.NetworkSourcePort = value; }

        /// <summary>
        /// When specified, forces the cmdlet return a 'bool' given that there isn't a return type by default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Returns true when the command succeeds")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter PassThru { get; set; }

        /// <summary>
        /// Determines if the indicator should trigger an event that is visible to an end-user. When set to ‘true,’ security tools
        /// will not notify the end user that a ‘hit’ has occurred. This is most often treated as audit or silent mode by security
        /// products where they will simply log that a match occurred but will not perform the action. Default value is false.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Determines if the indicator should trigger an event that is visible to an end-user. When set to ‘true,’ security tools will not notify the end user that a ‘hit’ has occurred. This is most often treated as audit or silent mode by security products where they will simply log that a match occurred but will not perform the action. Default value is false.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines if the indicator should trigger an event that is visible to an end-user. When set to ‘true,’ security tools will not notify the end user that a ‘hit’ has occurred. This is most often treated as audit or silent mode by security products where they will simply log that a match occurred but will not perform the action. Default value is false.",
        SerializedName = @"passiveOnly",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter PassiveOnly { get => BodyParameterBody.PassiveOnly ?? default(global::System.Management.Automation.SwitchParameter); set => BodyParameterBody.PassiveOnly = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Graph.PowerShell.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Graph.PowerShell.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        /// An integer representing the severity of the malicious behavior identified by the data within the indicator. Acceptable
        /// values are 0 – 5 where 5 is the most severe and zero is not severe at all. Default value is 3.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "An integer representing the severity of the malicious behavior identified by the data within the indicator. Acceptable values are 0 – 5 where 5 is the most severe and zero is not severe at all. Default value is 3.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"An integer representing the severity of the malicious behavior identified by the data within the indicator. Acceptable values are 0 – 5 where 5 is the most severe and zero is not severe at all. Default value is 3.",
        SerializedName = @"severity",
        PossibleTypes = new [] { typeof(int) })]
        public int Severity { get => BodyParameterBody.Severity ?? default(int); set => BodyParameterBody.Severity = value; }

        /// <summary>A JSON array of strings that stores arbitrary tags/keywords.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A JSON array of strings that stores arbitrary tags/keywords.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A JSON array of strings that stores arbitrary tags/keywords.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(string) })]
        public string[] Tags { get => BodyParameterBody.Tags ?? null /* arrayOf */; set => BodyParameterBody.Tags = value; }

        /// <summary>
        /// A string value representing a single security product to which the indicator should be applied. Acceptable values are:
        /// Azure Sentinel, Microsoft Defender ATP. Required
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A string value representing a single security product to which the indicator should be applied. Acceptable values are: Azure Sentinel, Microsoft Defender ATP. Required")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A string value representing a single security product to which the indicator should be applied. Acceptable values are: Azure Sentinel, Microsoft Defender ATP. Required",
        SerializedName = @"targetProduct",
        PossibleTypes = new [] { typeof(string) })]
        public string TargetProduct { get => BodyParameterBody.TargetProduct ?? null; set => BodyParameterBody.TargetProduct = value; }

        /// <summary>
        /// Each indicator must have a valid Indicator Threat Type. Possible values are: Botnet, C2, CryptoMining, Darknet, DDoS,
        /// MaliciousUrl, Malware, Phishing, Proxy, PUA, WatchList. Required.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Each indicator must have a valid Indicator Threat Type. Possible values are: Botnet, C2, CryptoMining, Darknet, DDoS, MaliciousUrl, Malware, Phishing, Proxy, PUA, WatchList. Required.")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Each indicator must have a valid Indicator Threat Type. Possible values are: Botnet, C2, CryptoMining, Darknet, DDoS, MaliciousUrl, Malware, Phishing, Proxy, PUA, WatchList. Required.",
        SerializedName = @"threatType",
        PossibleTypes = new [] { typeof(string) })]
        public string ThreatType { get => BodyParameterBody.ThreatType ?? null; set => BodyParameterBody.ThreatType = value; }

        /// <summary>Backing field for <see cref="TiIndicatorId" /> property.</summary>
        private string _tiIndicatorId;

        /// <summary>key: id of tiIndicator</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "key: id of tiIndicator")]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"key: id of tiIndicator",
        SerializedName = @"tiIndicator-id",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Path)]
        public string TiIndicatorId { get => this._tiIndicatorId; set => this._tiIndicatorId = value; }

        /// <summary>tlpLevel</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "tlpLevel")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"tlpLevel",
        SerializedName = @"tlpLevel",
        PossibleTypes = new [] { typeof(string) })]
        public string TlpLevel { get => BodyParameterBody.TlpLevel ?? null; set => BodyParameterBody.TlpLevel = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        public string Url { get => BodyParameterBody.Url ?? null; set => BodyParameterBody.Url = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Graph.PowerShell.Category(global::Microsoft.Graph.PowerShell.ParameterCategory.Body)]
        [Microsoft.Graph.PowerShell.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"userAgent",
        PossibleTypes = new [] { typeof(string) })]
        public string UserAgent { get => BodyParameterBody.UserAgent ?? null; set => BodyParameterBody.UserAgent = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="IOdataError" /> from the remote
        /// call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<IOdataError> response, ref global::System.Threading.Tasks.Task<bool> returnNow) => this.OverrideOnDefault(responseMessage,ref returnNow);

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<IOdataError> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnNoContent</c> will be called before the regular onNoContent has been processed, allowing customization of
        /// what happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="returnNow">/// Determines if the rest of the onNoContent method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnNoContent(global::System.Net.Http.HttpResponseMessage responseMessage, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Graph.PowerShell.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletEndProcessing).Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Graph.PowerShell.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Graph.PowerShell.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Graph.PowerShell.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data, new[] { data.Message });
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Graph.PowerShell.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                }
                await Microsoft.Graph.PowerShell.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Graph.PowerShell.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Graph.PowerShell.Runtime.EventData ), InvocationInformation, this.ParameterSetName, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            try
            {
                // work
                if (ShouldProcess($"Call remote 'SecurityUpdateTiIndicators' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Graph.PowerShell.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                Microsoft.Graph.PowerShell.Runtime.DictionaryExtensions.HashTableToDictionary<global::System.Object>(AdditionalProperties,BodyParameterBody.AdditionalProperties);
                await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordAsyncStart); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Graph.PowerShell.Module.Instance.CreatePipeline(InvocationInformation, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Graph.PowerShell.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Graph.PowerShell.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.SecurityUpdateTiIndicators(TiIndicatorId, BodyParameterBody, onNoContent, onDefault, this, Pipeline);
                    await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Graph.PowerShell.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  TiIndicatorId=TiIndicatorId,body=BodyParameterBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Signal(Microsoft.Graph.PowerShell.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Graph.PowerShell.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="UpdateMgSecurityTiIndicator_UpdateExpanded" /> cmdlet class.
        /// </summary>
        public UpdateMgSecurityTiIndicator_UpdateExpanded()
        {

        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="IOdataError" /> from the remote
        /// call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<IOdataError> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                // Unrecognized Response. Create an error record based on what we have.
                var ex = new Microsoft.Graph.PowerShell.Runtime.RestException<IOdataError>(responseMessage, await response);
                WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { TiIndicatorId=TiIndicatorId, body=BodyParameterBody })
                {
                  ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                });
            }
        }

        /// <summary>a delegate that is called when the remote service returns 204 (NoContent).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onNoContent(global::System.Net.Http.HttpResponseMessage responseMessage)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnNoContent(responseMessage, ref _returnNow);
                // if overrideOnNoContent has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onNoContent - response for 204 /
                if (true == MyInvocation?.BoundParameters?.ContainsKey("PassThru"))
                {
                    WriteObject(true);
                }
            }
        }
    }
}