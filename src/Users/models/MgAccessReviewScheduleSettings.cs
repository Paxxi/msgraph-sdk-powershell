// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.6.2, generator: @autorest/powershell@3.0.0)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Graph.PowerShell.Users.Models
{

    /// <summary>accessReviewScheduleSettings</summary>
    public partial class MgAccessReviewScheduleSettings
    {

        /// <summary>Backing field for <see cref="ApplyActions" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgAccessReviewApplyAction[] _applyActions;

        /// <summary>
        /// Optional field. Describes the actions to take once a review is complete. There are two types that are currently supported:
        /// removeAccessApplyAction (default) and disableAndDeleteUserApplyAction. Field only needs to be specified in the case of
        /// disableAndDeleteUserApplyAction. See accessReviewApplyAction.
        /// </summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgAccessReviewApplyAction[] ApplyActions { get => this._applyActions; set => this._applyActions = value; }

        /// <summary>Backing field for <see cref="AutoApplyDecisionsEnabled" /> property.</summary>
        private bool? _autoApplyDecisionsEnabled;

        /// <summary>
        /// Indicates whether decisions are automatically applied. When set to false, a user must apply the decisions manually once
        /// the reviewer completes the access review. When set to true, decisions are applied automatically after the access review
        /// instance duration ends, whether or not the reviewers have responded. Default value is false.
        /// </summary>
        public bool? AutoApplyDecisionsEnabled { get => this._autoApplyDecisionsEnabled; set => this._autoApplyDecisionsEnabled = value; }

        /// <summary>Backing field for <see cref="DefaultDecision" /> property.</summary>
        private string _defaultDecision;

        /// <summary>
        /// Decision chosen if defaultDecisionEnabled is enabled. Can be one of Approve, Deny, or Recommendation.
        /// </summary>
        public string DefaultDecision { get => this._defaultDecision; set => this._defaultDecision = value; }

        /// <summary>Backing field for <see cref="DefaultDecisionEnabled" /> property.</summary>
        private bool? _defaultDecisionEnabled;

        /// <summary>
        /// Indicates whether the default decision is enabled or disabled when reviewers do not respond. Default value is false.
        /// </summary>
        public bool? DefaultDecisionEnabled { get => this._defaultDecisionEnabled; set => this._defaultDecisionEnabled = value; }

        /// <summary>Backing field for <see cref="InstanceDurationInDays" /> property.</summary>
        private int? _instanceDurationInDays;

        /// <summary>Duration of each recurrence of review (accessReviewInstance) in number of days.</summary>
        public int? InstanceDurationInDays { get => this._instanceDurationInDays; set => this._instanceDurationInDays = value; }

        /// <summary>Backing field for <see cref="JustificationRequiredOnApproval" /> property.</summary>
        private bool? _justificationRequiredOnApproval;

        /// <summary>
        /// Indicates whether reviewers are required to provide justification with their decision. Default value is false.
        /// </summary>
        public bool? JustificationRequiredOnApproval { get => this._justificationRequiredOnApproval; set => this._justificationRequiredOnApproval = value; }

        /// <summary>Backing field for <see cref="MailNotificationsEnabled" /> property.</summary>
        private bool? _mailNotificationsEnabled;

        /// <summary>Indicates whether emails are enabled or disabled. Default value is false.</summary>
        public bool? MailNotificationsEnabled { get => this._mailNotificationsEnabled; set => this._mailNotificationsEnabled = value; }

        /// <summary>Backing field for <see cref="RecommendationLookBackDuration" /> property.</summary>
        private global::System.TimeSpan? _recommendationLookBackDuration;

        public global::System.TimeSpan? RecommendationLookBackDuration { get => this._recommendationLookBackDuration; set => this._recommendationLookBackDuration = value; }

        /// <summary>Backing field for <see cref="RecommendationsEnabled" /> property.</summary>
        private bool? _recommendationsEnabled;

        /// <summary>Indicates whether decision recommendations are enabled/disabled.</summary>
        public bool? RecommendationsEnabled { get => this._recommendationsEnabled; set => this._recommendationsEnabled = value; }

        /// <summary>Backing field for <see cref="Recurrence" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgPatternedRecurrence _recurrence;

        /// <summary>patternedRecurrence</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgPatternedRecurrence Recurrence { get => (this._recurrence = this._recurrence ?? new Microsoft.Graph.PowerShell.Users.Models.MgPatternedRecurrence()); set => this._recurrence = value; }

        /// <summary>Backing field for <see cref="ReminderNotificationsEnabled" /> property.</summary>
        private bool? _reminderNotificationsEnabled;

        /// <summary>Indicates whether reminders are enabled or disabled. Default value is false.</summary>
        public bool? ReminderNotificationsEnabled { get => this._reminderNotificationsEnabled; set => this._reminderNotificationsEnabled = value; }

    }
}