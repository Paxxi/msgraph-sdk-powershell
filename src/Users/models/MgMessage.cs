// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.6.2, generator: @autorest/powershell@3.0.0)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Graph.PowerShell.Users.Models
{

    /// <summary>message</summary>
    public partial class MgMessage
    {

        /// <summary>Backing field for <see cref="Attachments" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgAttachment[] _attachments;

        /// <summary>The fileAttachment and itemAttachment attachments for the message.</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgAttachment[] Attachments { get => this._attachments; set => this._attachments = value; }

        /// <summary>Backing field for <see cref="BccRecipients" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgRecipient[] _bccRecipients;

        /// <summary>The Bcc: recipients for the message.</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgRecipient[] BccRecipients { get => this._bccRecipients; set => this._bccRecipients = value; }

        /// <summary>Backing field for <see cref="Body" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgItemBody _body;

        /// <summary>itemBody</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgItemBody Body { get => (this._body = this._body ?? new Microsoft.Graph.PowerShell.Users.Models.MgItemBody()); set => this._body = value; }

        /// <summary>Backing field for <see cref="BodyPreview" /> property.</summary>
        private string _bodyPreview;

        /// <summary>
        /// The first 255 characters of the message body. It is in text format. If the message contains instances of mention, this
        /// property would contain a concatenation of these mentions as well.
        /// </summary>
        public string BodyPreview { get => this._bodyPreview; set => this._bodyPreview = value; }

        /// <summary>The categories associated with the item</summary>
        public string[] Categories { get; set; }

        /// <summary>Backing field for <see cref="CcRecipients" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgRecipient[] _ccRecipients;

        /// <summary>The Cc: recipients for the message.</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgRecipient[] CcRecipients { get => this._ccRecipients; set => this._ccRecipients = value; }

        /// <summary>
        /// Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to
        /// apply changes to the correct version of the object. Read-only.
        /// </summary>
        public string ChangeKey { get; set; }

        /// <summary>Backing field for <see cref="ConversationId" /> property.</summary>
        private string _conversationId;

        /// <summary>The ID of the conversation the email belongs to.</summary>
        public string ConversationId { get => this._conversationId; set => this._conversationId = value; }

        /// <summary>Backing field for <see cref="ConversationIndex" /> property.</summary>
        private byte[] _conversationIndex;

        /// <summary>Indicates the position of the message within the conversation.</summary>
        public byte[] ConversationIndex { get => this._conversationIndex; set => this._conversationIndex = value; }

        /// <summary>
        /// The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example,
        /// midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        public global::System.DateTime? CreatedDateTime { get; set; }

        /// <summary>Backing field for <see cref="Extensions" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgExtension[] _extensions;

        /// <summary>The collection of open extensions defined for the message. Nullable.</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgExtension[] Extensions { get => this._extensions; set => this._extensions = value; }

        /// <summary>Backing field for <see cref="Flag" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgFollowupFlag _flag;

        /// <summary>followupFlag</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgFollowupFlag Flag { get => (this._flag = this._flag ?? new Microsoft.Graph.PowerShell.Users.Models.MgFollowupFlag()); set => this._flag = value; }

        /// <summary>Backing field for <see cref="From" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgRecipient _from;

        /// <summary>recipient</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgRecipient From { get => (this._from = this._from ?? new Microsoft.Graph.PowerShell.Users.Models.MgRecipient()); set => this._from = value; }

        /// <summary>Backing field for <see cref="HasAttachments" /> property.</summary>
        private bool? _hasAttachments;

        /// <summary>
        /// Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains
        /// only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property
        /// to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>.
        /// </summary>
        public bool? HasAttachments { get => this._hasAttachments; set => this._hasAttachments = value; }

        /// <summary>Read-only.</summary>
        public string Id { get; set; }

        /// <summary>Backing field for <see cref="Importance" /> property.</summary>
        private string _importance;

        /// <summary>importance</summary>
        public string Importance { get => this._importance; set => this._importance = value; }

        /// <summary>Backing field for <see cref="InferenceClassification" /> property.</summary>
        private string _inferenceClassification;

        /// <summary>inferenceClassificationType</summary>
        public string InferenceClassification { get => this._inferenceClassification; set => this._inferenceClassification = value; }

        /// <summary>Backing field for <see cref="InternetMessageHeaders" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgInternetMessageHeader[] _internetMessageHeaders;

        /// <summary>
        /// A collection of message headers defined by RFC5322. The set includes message headers indicating the network path taken
        /// by a message from the sender to the recipient. It can also contain custom message headers that hold app data for the message.
        /// Returned only on applying a $select query option. Read-only.
        /// </summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgInternetMessageHeader[] InternetMessageHeaders { get => this._internetMessageHeaders; set => this._internetMessageHeaders = value; }

        /// <summary>Backing field for <see cref="InternetMessageId" /> property.</summary>
        private string _internetMessageId;

        /// <summary>The message ID in the format specified by RFC2822.</summary>
        public string InternetMessageId { get => this._internetMessageId; set => this._internetMessageId = value; }

        /// <summary>Backing field for <see cref="IsDeliveryReceiptRequested" /> property.</summary>
        private bool? _isDeliveryReceiptRequested;

        /// <summary>Indicates whether a read receipt is requested for the message.</summary>
        public bool? IsDeliveryReceiptRequested { get => this._isDeliveryReceiptRequested; set => this._isDeliveryReceiptRequested = value; }

        /// <summary>Backing field for <see cref="IsDraft" /> property.</summary>
        private bool? _isDraft;

        /// <summary>
        /// Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet.
        /// </summary>
        public bool? IsDraft { get => this._isDraft; set => this._isDraft = value; }

        /// <summary>Backing field for <see cref="IsRead" /> property.</summary>
        private bool? _isRead;

        /// <summary>Indicates whether the message has been read.</summary>
        public bool? IsRead { get => this._isRead; set => this._isRead = value; }

        /// <summary>Backing field for <see cref="IsReadReceiptRequested" /> property.</summary>
        private bool? _isReadReceiptRequested;

        /// <summary>Indicates whether a read receipt is requested for the message.</summary>
        public bool? IsReadReceiptRequested { get => this._isReadReceiptRequested; set => this._isReadReceiptRequested = value; }

        /// <summary>
        /// The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example,
        /// midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        public global::System.DateTime? LastModifiedDateTime { get; set; }

        /// <summary>Backing field for <see cref="Mentions" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgMention[] _mentions;

        /// <summary>
        /// A collection of mentions in the message, ordered by the createdDateTime from the newest to the oldest. By default, a GET
        /// /messages does not return this property unless you apply $expand on the property.
        /// </summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgMention[] Mentions { get => this._mentions; set => this._mentions = value; }

        /// <summary>Backing field for <see cref="MentionsPreview" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgMentionsPreview _mentionsPreview;

        /// <summary>mentionsPreview</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgMentionsPreview MentionsPreview { get => (this._mentionsPreview = this._mentionsPreview ?? new Microsoft.Graph.PowerShell.Users.Models.MgMentionsPreview()); set => this._mentionsPreview = value; }

        /// <summary>Backing field for <see cref="MultiValueExtendedProperties" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgMultiValueLegacyExtendedProperty[] _multiValueExtendedProperties;

        /// <summary>
        /// The collection of multi-value extended properties defined for the message. Nullable.
        /// </summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgMultiValueLegacyExtendedProperty[] MultiValueExtendedProperties { get => this._multiValueExtendedProperties; set => this._multiValueExtendedProperties = value; }

        /// <summary>Backing field for <see cref="ParentFolderId" /> property.</summary>
        private string _parentFolderId;

        /// <summary>The unique identifier for the message's parent mailFolder.</summary>
        public string ParentFolderId { get => this._parentFolderId; set => this._parentFolderId = value; }

        /// <summary>Backing field for <see cref="ReceivedDateTime" /> property.</summary>
        private global::System.DateTime? _receivedDateTime;

        /// <summary>
        /// The date and time the message was received. The date and time information uses ISO 8601 format and is always in UTC time.
        /// For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        public global::System.DateTime? ReceivedDateTime { get => this._receivedDateTime; set => this._receivedDateTime = value; }

        /// <summary>Backing field for <see cref="ReplyTo" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgRecipient[] _replyTo;

        /// <summary>The email addresses to use when replying.</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgRecipient[] ReplyTo { get => this._replyTo; set => this._replyTo = value; }

        /// <summary>Backing field for <see cref="Sender" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgRecipient _sender;

        /// <summary>recipient</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgRecipient Sender { get => (this._sender = this._sender ?? new Microsoft.Graph.PowerShell.Users.Models.MgRecipient()); set => this._sender = value; }

        /// <summary>Backing field for <see cref="SentDateTime" /> property.</summary>
        private global::System.DateTime? _sentDateTime;

        /// <summary>
        /// The date and time the message was sent. The date and time information uses ISO 8601 format and is always in UTC time.
        /// For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
        /// </summary>
        public global::System.DateTime? SentDateTime { get => this._sentDateTime; set => this._sentDateTime = value; }

        /// <summary>Backing field for <see cref="SingleValueExtendedProperties" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgSingleValueLegacyExtendedProperty[] _singleValueExtendedProperties;

        /// <summary>
        /// The collection of single-value extended properties defined for the message. Nullable.
        /// </summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgSingleValueLegacyExtendedProperty[] SingleValueExtendedProperties { get => this._singleValueExtendedProperties; set => this._singleValueExtendedProperties = value; }

        /// <summary>Backing field for <see cref="Subject" /> property.</summary>
        private string _subject;

        /// <summary>The subject of the message.</summary>
        public string Subject { get => this._subject; set => this._subject = value; }

        /// <summary>Backing field for <see cref="ToRecipients" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgRecipient[] _toRecipients;

        /// <summary>The To: recipients for the message.</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgRecipient[] ToRecipients { get => this._toRecipients; set => this._toRecipients = value; }

        /// <summary>Backing field for <see cref="UniqueBody" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgItemBody _uniqueBody;

        /// <summary>itemBody</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgItemBody UniqueBody { get => (this._uniqueBody = this._uniqueBody ?? new Microsoft.Graph.PowerShell.Users.Models.MgItemBody()); set => this._uniqueBody = value; }

        /// <summary>Backing field for <see cref="UnsubscribeData" /> property.</summary>
        private string[] _unsubscribeData;

        public string[] UnsubscribeData { get => this._unsubscribeData; set => this._unsubscribeData = value; }

        /// <summary>Backing field for <see cref="UnsubscribeEnabled" /> property.</summary>
        private bool? _unsubscribeEnabled;

        public bool? UnsubscribeEnabled { get => this._unsubscribeEnabled; set => this._unsubscribeEnabled = value; }

        /// <summary>Backing field for <see cref="WebLink" /> property.</summary>
        private string _webLink;

        /// <summary>
        /// The URL to open the message in Outlook on the web.You can append an ispopout argument to the end of the URL to change
        /// how the message is displayed. If ispopout is not present or if it is set to 1, then the message is shown in a popout window.
        /// If ispopout is set to 0, then the browser will show the message in the Outlook on the web review pane.The message will
        /// open in the browser if you are logged in to your mailbox via Outlook on the web. You will be prompted to login if you
        /// are not already logged in with the browser.This URL cannot be accessed from within an iFrame.
        /// </summary>
        public string WebLink { get => this._webLink; set => this._webLink = value; }

    }
}