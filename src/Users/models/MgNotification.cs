// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.6.2, generator: @autorest/powershell@3.0.0)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Graph.PowerShell.Users.Models
{

    /// <summary>notification</summary>
    public partial class MgNotification
    {

        /// <summary>Backing field for <see cref="DisplayTimeToLive" /> property.</summary>
        private int? _displayTimeToLive;

        /// <summary>
        /// Sets how long (in seconds) this notification content will stay in each platform’s notification viewer. For example, when
        /// the notification is delivered to a Windows device, the value of this property is passed on to ToastNotification.ExpirationTime,
        /// which determines how long the toast notification will stay in the user’s Windows Action Center.
        /// </summary>
        public int? DisplayTimeToLive { get => this._displayTimeToLive; set => this._displayTimeToLive = value; }

        /// <summary>Backing field for <see cref="ExpirationDateTime" /> property.</summary>
        private global::System.DateTime? _expirationDateTime;

        /// <summary>
        /// Sets a UTC expiration date and time on a user notification using ISO 8601 format (for example, midnight UTC on Jan 1,
        /// 2019 would look like this: '2019-01-01T00:00:00Z'). When time is up, the notification is removed from the Microsoft Graph
        /// notification feed store completely and is no longer part of notification history. Max value is 30 days.
        /// </summary>
        public global::System.DateTime? ExpirationDateTime { get => this._expirationDateTime; set => this._expirationDateTime = value; }

        /// <summary>Backing field for <see cref="GroupName" /> property.</summary>
        private string _groupName;

        /// <summary>
        /// The name of the group that this notification belongs to. It is set by the developer for the purpose of grouping notifications
        /// together.
        /// </summary>
        public string GroupName { get => this._groupName; set => this._groupName = value; }

        /// <summary>Read-only.</summary>
        public string Id { get; set; }

        /// <summary>Backing field for <see cref="Payload" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgPayloadTypes _payload;

        /// <summary>payloadTypes</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgPayloadTypes Payload { get => (this._payload = this._payload ?? new Microsoft.Graph.PowerShell.Users.Models.MgPayloadTypes()); set => this._payload = value; }

        /// <summary>Backing field for <see cref="Priority" /> property.</summary>
        private string _priority;

        /// <summary>priority</summary>
        public string Priority { get => this._priority; set => this._priority = value; }

        /// <summary>Backing field for <see cref="TargetHostName" /> property.</summary>
        private string _targetHostName;

        /// <summary>
        /// Represents the host name of the app to which the calling service wants to post the notification, for the given user. If
        /// targeting web endpoints (see targetPolicy.platformTypes), ensure that targetHostName is the same as the name used when
        /// creating a subscription on the client side within the application JSON property.
        /// </summary>
        public string TargetHostName { get => this._targetHostName; set => this._targetHostName = value; }

        /// <summary>Backing field for <see cref="TargetPolicy" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgTargetPolicyEndpoints _targetPolicy;

        /// <summary>targetPolicyEndpoints</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgTargetPolicyEndpoints TargetPolicy { get => (this._targetPolicy = this._targetPolicy ?? new Microsoft.Graph.PowerShell.Users.Models.MgTargetPolicyEndpoints()); set => this._targetPolicy = value; }

    }
}