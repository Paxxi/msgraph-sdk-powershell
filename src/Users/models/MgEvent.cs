// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.6.2, generator: @autorest/powershell@3.0.0)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Graph.PowerShell.Users.Models
{

    /// <summary>event</summary>
    public partial class MgEvent
    {

        /// <summary>Backing field for <see cref="AllowNewTimeProposals" /> property.</summary>
        private bool? _allowNewTimeProposals;

        /// <summary>
        /// True if the meeting organizer allows invitees to propose a new time when responding, false otherwise. Optional. Default
        /// is true.
        /// </summary>
        public bool? AllowNewTimeProposals { get => this._allowNewTimeProposals; set => this._allowNewTimeProposals = value; }

        /// <summary>Backing field for <see cref="Attachments" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgAttachment[] _attachments;

        /// <summary>
        /// The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property.
        /// Read-only. Nullable.
        /// </summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgAttachment[] Attachments { get => this._attachments; set => this._attachments = value; }

        /// <summary>Backing field for <see cref="Attendees" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgAttendee[] _attendees;

        /// <summary>The collection of attendees for the event.</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgAttendee[] Attendees { get => this._attendees; set => this._attendees = value; }

        /// <summary>Backing field for <see cref="Body" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgItemBody _body;

        /// <summary>itemBody</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgItemBody Body { get => (this._body = this._body ?? new Microsoft.Graph.PowerShell.Users.Models.MgItemBody()); set => this._body = value; }

        /// <summary>Backing field for <see cref="BodyPreview" /> property.</summary>
        private string _bodyPreview;

        /// <summary>The preview of the message associated with the event. It is in text format.</summary>
        public string BodyPreview { get => this._bodyPreview; set => this._bodyPreview = value; }

        /// <summary>Backing field for <see cref="Calendar" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgCalendar _calendar;

        /// <summary>calendar</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgCalendar Calendar { get => (this._calendar = this._calendar ?? new Microsoft.Graph.PowerShell.Users.Models.MgCalendar()); set => this._calendar = value; }

        /// <summary>Backing field for <see cref="CancelledOccurrences" /> property.</summary>
        private string[] _cancelledOccurrences;

        /// <summary>
        /// Contains occurrenceId property values of cancelled instances in a recurring series, if the event is the series master.
        /// Instances in a recurring series that are cancelled are called cancelledOccurences.Returned only on $select in a Get operation
        /// which specifies the id of a series master event (that is, the seriesMasterId property value).
        /// </summary>
        public string[] CancelledOccurrences { get => this._cancelledOccurrences; set => this._cancelledOccurrences = value; }

        /// <summary>The categories associated with the item</summary>
        public string[] Categories { get; set; }

        /// <summary>
        /// Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to
        /// apply changes to the correct version of the object. Read-only.
        /// </summary>
        public string ChangeKey { get; set; }

        /// <summary>
        /// The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example,
        /// midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        public global::System.DateTime? CreatedDateTime { get; set; }

        /// <summary>Backing field for <see cref="End" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgDateTimeZone _end;

        /// <summary>dateTimeTimeZone</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgDateTimeZone End { get => (this._end = this._end ?? new Microsoft.Graph.PowerShell.Users.Models.MgDateTimeZone()); set => this._end = value; }

        /// <summary>Backing field for <see cref="ExceptionOccurrences" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgEvent[] _exceptionOccurrences;

        public Microsoft.Graph.PowerShell.Users.Models.MgEvent[] ExceptionOccurrences { get => this._exceptionOccurrences; set => this._exceptionOccurrences = value; }

        /// <summary>Backing field for <see cref="Extensions" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgExtension[] _extensions;

        /// <summary>The collection of open extensions defined for the event. Nullable.</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgExtension[] Extensions { get => this._extensions; set => this._extensions = value; }

        /// <summary>Backing field for <see cref="HasAttachments" /> property.</summary>
        private bool? _hasAttachments;

        /// <summary>Set to true if the event has attachments.</summary>
        public bool? HasAttachments { get => this._hasAttachments; set => this._hasAttachments = value; }

        /// <summary>Backing field for <see cref="HideAttendees" /> property.</summary>
        private bool? _hideAttendees;

        /// <summary>
        /// When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. Default is false.
        /// </summary>
        public bool? HideAttendees { get => this._hideAttendees; set => this._hideAttendees = value; }

        /// <summary>Read-only.</summary>
        public string Id { get; set; }

        /// <summary>Backing field for <see cref="Importance" /> property.</summary>
        private string _importance;

        /// <summary>importance</summary>
        public string Importance { get => this._importance; set => this._importance = value; }

        /// <summary>Backing field for <see cref="Instances" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgEvent[] _instances;

        /// <summary>
        /// The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part
        /// of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled
        /// from the series. Navigation property. Read-only. Nullable.
        /// </summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgEvent[] Instances { get => this._instances; set => this._instances = value; }

        /// <summary>Backing field for <see cref="IsAllDay" /> property.</summary>
        private bool? _isAllDay;

        /// <summary>Set to true if the event lasts all day.</summary>
        public bool? IsAllDay { get => this._isAllDay; set => this._isAllDay = value; }

        /// <summary>Backing field for <see cref="IsCancelled" /> property.</summary>
        private bool? _isCancelled;

        /// <summary>Set to true if the event has been canceled.</summary>
        public bool? IsCancelled { get => this._isCancelled; set => this._isCancelled = value; }

        /// <summary>Backing field for <see cref="IsDraft" /> property.</summary>
        private bool? _isDraft;

        /// <summary>
        /// Set to true if the user has updated the meeting in Outlook but has not sent the updates to attendees. Set to false if
        /// all changes have been sent, or if the event is an appointment without any attendees.
        /// </summary>
        public bool? IsDraft { get => this._isDraft; set => this._isDraft = value; }

        /// <summary>Backing field for <see cref="IsOnlineMeeting" /> property.</summary>
        private bool? _isOnlineMeeting;

        /// <summary>
        /// True if this event has online meeting information, false otherwise. Default is false. Optional.
        /// </summary>
        public bool? IsOnlineMeeting { get => this._isOnlineMeeting; set => this._isOnlineMeeting = value; }

        /// <summary>Backing field for <see cref="IsOrganizer" /> property.</summary>
        private bool? _isOrganizer;

        /// <summary>
        /// Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified
        /// by the organizer property of the event). This also applies if a delegate organized the event on behalf of the owner.
        /// </summary>
        public bool? IsOrganizer { get => this._isOrganizer; set => this._isOrganizer = value; }

        /// <summary>Backing field for <see cref="IsReminderOn" /> property.</summary>
        private bool? _isReminderOn;

        /// <summary>Set to true if an alert is set to remind the user of the event.</summary>
        public bool? IsReminderOn { get => this._isReminderOn; set => this._isReminderOn = value; }

        /// <summary>
        /// The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example,
        /// midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        public global::System.DateTime? LastModifiedDateTime { get; set; }

        /// <summary>Backing field for <see cref="Location" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgLocation _location;

        /// <summary>location</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgLocation Location { get => (this._location = this._location ?? new Microsoft.Graph.PowerShell.Users.Models.MgLocation()); set => this._location = value; }

        /// <summary>Backing field for <see cref="Locations" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgLocation[] _locations;

        /// <summary>
        /// The locations where the event is held or attended from. The location and locations properties always correspond with each
        /// other. If you update the location property, any prior locations in the locations collection would be removed and replaced
        /// by the new location value.
        /// </summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgLocation[] Locations { get => this._locations; set => this._locations = value; }

        /// <summary>Backing field for <see cref="MultiValueExtendedProperties" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgMultiValueLegacyExtendedProperty[] _multiValueExtendedProperties;

        /// <summary>
        /// The collection of multi-value extended properties defined for the event. Read-only. Nullable.
        /// </summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgMultiValueLegacyExtendedProperty[] MultiValueExtendedProperties { get => this._multiValueExtendedProperties; set => this._multiValueExtendedProperties = value; }

        /// <summary>Backing field for <see cref="OccurrenceId" /> property.</summary>
        private string _occurrenceId;

        public string OccurrenceId { get => this._occurrenceId; set => this._occurrenceId = value; }

        /// <summary>Backing field for <see cref="OnlineMeeting" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgOnlineMeetingInfo _onlineMeeting;

        /// <summary>onlineMeetingInfo</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgOnlineMeetingInfo OnlineMeeting { get => (this._onlineMeeting = this._onlineMeeting ?? new Microsoft.Graph.PowerShell.Users.Models.MgOnlineMeetingInfo()); set => this._onlineMeeting = value; }

        /// <summary>Backing field for <see cref="OnlineMeetingProvider" /> property.</summary>
        private string _onlineMeetingProvider;

        /// <summary>onlineMeetingProviderType</summary>
        public string OnlineMeetingProvider { get => this._onlineMeetingProvider; set => this._onlineMeetingProvider = value; }

        /// <summary>Backing field for <see cref="OnlineMeetingUrl" /> property.</summary>
        private string _onlineMeetingUrl;

        /// <summary>
        /// A URL for an online meeting. The property is set only when an organizer specifies an event as an online meeting such as
        /// a Skype meeting. Read-only.
        /// </summary>
        public string OnlineMeetingUrl { get => this._onlineMeetingUrl; set => this._onlineMeetingUrl = value; }

        /// <summary>Backing field for <see cref="Organizer" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgRecipient _organizer;

        /// <summary>recipient</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgRecipient Organizer { get => (this._organizer = this._organizer ?? new Microsoft.Graph.PowerShell.Users.Models.MgRecipient()); set => this._organizer = value; }

        /// <summary>Backing field for <see cref="OriginalEndTimeZone" /> property.</summary>
        private string _originalEndTimeZone;

        /// <summary>
        /// The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy
        /// custom time zone was set in desktop Outlook.
        /// </summary>
        public string OriginalEndTimeZone { get => this._originalEndTimeZone; set => this._originalEndTimeZone = value; }

        /// <summary>Backing field for <see cref="OriginalStart" /> property.</summary>
        private global::System.DateTime? _originalStart;

        /// <summary>
        /// The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example,
        /// midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
        /// </summary>
        public global::System.DateTime? OriginalStart { get => this._originalStart; set => this._originalStart = value; }

        /// <summary>Backing field for <see cref="OriginalStartTimeZone" /> property.</summary>
        private string _originalStartTimeZone;

        /// <summary>
        /// The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy
        /// custom time zone was set in desktop Outlook.
        /// </summary>
        public string OriginalStartTimeZone { get => this._originalStartTimeZone; set => this._originalStartTimeZone = value; }

        /// <summary>Backing field for <see cref="Recurrence" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgPatternedRecurrence _recurrence;

        /// <summary>patternedRecurrence</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgPatternedRecurrence Recurrence { get => (this._recurrence = this._recurrence ?? new Microsoft.Graph.PowerShell.Users.Models.MgPatternedRecurrence()); set => this._recurrence = value; }

        /// <summary>Backing field for <see cref="ReminderMinutesBeforeStart" /> property.</summary>
        private int? _reminderMinutesBeforeStart;

        /// <summary>
        /// The number of minutes before the event start time that the reminder alert occurs.
        /// </summary>
        public int? ReminderMinutesBeforeStart { get => this._reminderMinutesBeforeStart; set => this._reminderMinutesBeforeStart = value; }

        /// <summary>Backing field for <see cref="ResponseRequested" /> property.</summary>
        private bool? _responseRequested;

        /// <summary>
        /// Default is true, which represents the organizer would like an invitee to send a response to the event.
        /// </summary>
        public bool? ResponseRequested { get => this._responseRequested; set => this._responseRequested = value; }

        /// <summary>Backing field for <see cref="ResponseStatus" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgResponseStatus _responseStatus;

        /// <summary>responseStatus</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgResponseStatus ResponseStatus { get => (this._responseStatus = this._responseStatus ?? new Microsoft.Graph.PowerShell.Users.Models.MgResponseStatus()); set => this._responseStatus = value; }

        /// <summary>Backing field for <see cref="Sensitivity" /> property.</summary>
        private string _sensitivity;

        /// <summary>sensitivity</summary>
        public string Sensitivity { get => this._sensitivity; set => this._sensitivity = value; }

        /// <summary>Backing field for <see cref="SeriesMasterId" /> property.</summary>
        private string _seriesMasterId;

        /// <summary>
        /// The ID for the recurring series master item, if this event is part of a recurring series.
        /// </summary>
        public string SeriesMasterId { get => this._seriesMasterId; set => this._seriesMasterId = value; }

        /// <summary>Backing field for <see cref="ShowAs" /> property.</summary>
        private string _showAs;

        /// <summary>freeBusyStatus</summary>
        public string ShowAs { get => this._showAs; set => this._showAs = value; }

        /// <summary>Backing field for <see cref="SingleValueExtendedProperties" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgSingleValueLegacyExtendedProperty[] _singleValueExtendedProperties;

        /// <summary>
        /// The collection of single-value extended properties defined for the event. Read-only. Nullable.
        /// </summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgSingleValueLegacyExtendedProperty[] SingleValueExtendedProperties { get => this._singleValueExtendedProperties; set => this._singleValueExtendedProperties = value; }

        /// <summary>Backing field for <see cref="Start" /> property.</summary>
        private Microsoft.Graph.PowerShell.Users.Models.MgDateTimeZone _start;

        /// <summary>dateTimeTimeZone</summary>
        public Microsoft.Graph.PowerShell.Users.Models.MgDateTimeZone Start { get => (this._start = this._start ?? new Microsoft.Graph.PowerShell.Users.Models.MgDateTimeZone()); set => this._start = value; }

        /// <summary>Backing field for <see cref="Subject" /> property.</summary>
        private string _subject;

        /// <summary>The text of the event's subject line.</summary>
        public string Subject { get => this._subject; set => this._subject = value; }

        /// <summary>Backing field for <see cref="TransactionId" /> property.</summary>
        private string _transactionId;

        /// <summary>
        /// A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries
        /// to create the same event. This is useful when low network connectivity causes the client to time out before receiving
        /// a response from the server for the client's prior create-event request. After you set transactionId when creating an event,
        /// you cannot change transactionId in a subsequent update. This property is only returned in a response payload if an app
        /// has set it. Optional.
        /// </summary>
        public string TransactionId { get => this._transactionId; set => this._transactionId = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>eventType</summary>
        public string Type { get => this._type; set => this._type = value; }

        /// <summary>Backing field for <see cref="Uid" /> property.</summary>
        private string _uid;

        public string Uid { get => this._uid; set => this._uid = value; }

        /// <summary>Backing field for <see cref="WebLink" /> property.</summary>
        private string _webLink;

        /// <summary>
        /// The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in
        /// to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL cannot be accessed from within an iFrame.
        /// </summary>
        public string WebLink { get => this._webLink; set => this._webLink = value; }

    }
}